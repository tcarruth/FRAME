{
    "collab_server" : "",
    "contents" : "\nlibrary(shiny)\nlibrary(DLMtool)\nlibrary(kableExtra)\nlibrary(formattable)\nlibrary(knitr)\nlibrary(dplyr)\nlibrary(gmailr)\n\nsource(\"./global.R\")\n\n# Define server logic required to generate and plot a random distribution\nshinyServer(function(input, output, session) {\n\n  Fpanel<-reactiveVal(0)\n  Mpanel<-reactiveVal(0)\n  Dpanel<-reactiveVal(0)\n  Calc<-reactiveVal(0)\n\n\n  output$Fpanel <- reactive({ Fpanel()})\n  output$Mpanel <- reactive({ Mpanel()})\n  output$Dpanel <- reactive({ Dpanel()})\n  output$Calc   <- reactive({ Calc()})\n\n  #vals <- reactiveValues(Fpanel = 0,Mpanel=0,Dpanel=0)\n  outputOptions(output,\"Fpanel\",suspendWhenHidden=FALSE)\n  outputOptions(output,\"Mpanel\",suspendWhenHidden=FALSE)\n  outputOptions(output,\"Dpanel\",suspendWhenHidden=FALSE)\n  outputOptions(output,\"Calc\",suspendWhenHidden=FALSE)\n\n  output$Fpanelout <- renderText({ paste(\"Fishery\",Fpanel(),\"/ 14\")})\n  output$Mpanelout <- renderText({ paste(\"Management\",Mpanel(),\"/ 3\")})\n  output$Dpanelout <- renderText({ paste(\"Data\",Dpanel(),\"/ 4\")})\n\n  # Some useful things\n  USERID<-Sys.getenv()[names(Sys.getenv())==\"USERNAME\"]\n  output$SessionID<-renderText(paste0(USERID,\"-\",strsplit(as.character(Sys.time()),\" \")[[1]][1],\"-\",strsplit(as.character(Sys.time()),\" \")[[1]][2]))\n  CurrentYr<-as.integer(substr(as.character(Sys.time()),1,4))\n  Just<-list(c(\"No introduction / general comments were provided\",rep(\"No justification was provided\",13)),rep(\"No justification was provided\",3),rep(\"No justification was provided\",4))\n\n  # Default simulation ttributes --------------------------------------------------------------------------------\n  nyears<-68 # 1950-2018\n  nsim<-48\n\n  makeState<-function(x)rep(T,length(get(x)))\n\n  Fpanel_names<-c(\"M_list\",\"D_list\",\"h_list\",\"FP_list\",\"F_list\",\"sel_list\",\"dome_list\",\"DR_list\",\"PRM_list\",\"sigR_list\",\"q_list\",\"A_list\",\"V_list\")\n  Mpanel_names<-c(\"M1_list\",\"IB_list\",\"IV_list\")\n  Dpanel_names<-c(\"D1_list\",\"CB_list\",\"Beta_list\",\"Err_list\")\n\n  MasterList<-list(Fpanel_names,Mpanel_names,Dpanel_names)\n\n  PanelState<-list(Fpanel=lapply(Fpanel_names, makeState),\n                   Mpanel=lapply(Mpanel_names, makeState),\n                   Dpanel=lapply(Dpanel_names, makeState))\n\n  PanelState[[3]][[4]]<-c(F,F,F,T) # Exception is the final selection of the data menu - quality is a radio button default to data-poor\n\n  getinputnames<-function(x)strsplit(x,\"_\")[[1]][1]\n\n  inputnames<-list(Fpanel=lapply(Fpanel_names,getinputnames),\n                   Mpanel=lapply(Mpanel_names,getinputnames),\n                   Dpanel=lapply(Dpanel_names,getinputnames))\n\n  inputtabs<-as.vector(unlist(inputnames))\n\n  # Record all changes to tabs\n  observeEvent(sapply(inputtabs, function(x) input[[x]]),{\n\n    for(i in 1:length(PanelState)){\n      for(j in 1:length(PanelState[[i]])) {\n        value<-sapply(inputnames[[i]][j],function(x) input[[x]])\n        PanelState[[i]][[j]] <<- get(MasterList[[i]][j])%in%value\n      }\n    }\n\n  })\n\n  MSCsave_auto<-function(){\n\n    MSClog<-list(PanelState, Just, Des)\n    saveRDS(MSClog,file=paste0(USERID,\"_autosave.msc\"))\n\n  }\n\n  # == File I/O =================\n\n  doprogress<-function(message,duration=1,n=20){\n    withProgress(message = message, value = 0, {\n      inc<-duration/n\n      for (i in 1:n) {\n        incProgress(1/n, detail = round(i*(100/n)))\n        Sys.sleep(inc)\n      }\n    })\n  }\n\n  output$Save<- downloadHandler(\n\n    filename = paste0(namconv(input$Name),\".msc\"), #paste0(getwd(),\"/\",namconv(input$Name),\".msc\"),\n\n    content=function(file){\n\n      updateTextAreaInput(session,\"Debug1\",value=file)\n      Des<-list(Name=input$Name, Species=input$Species, Region=input$Region, Agency=input$Agency, nyears=input$nyears, Author=input$Author)\n      MSClog<-list(PanelState, Just, Des)\n      doprogress(\"Saving\")\n      saveRDS(MSClog,file)\n\n    }\n\n  )\n\n  observeEvent(input$Analysis_type,{\n\n    if(input$Analysis_type=='Demo'){\n      updateNumericInput(session,'nsim',value=\"24\")\n    }else{\n      updateNumericInput(session,'nsim',value=\"96\")\n    }\n\n    if(input$Analysis_type=='RE'){\n      updateNumericInput(session,'proyears',value=\"100\")\n    }else{\n      updateNumericInput(session,'proyears',value=\"50\")\n    }\n\n    MPs<<-getMPs()\n    updateSelectInput(session=session,inputId=\"AI_MP\",choices=MPs,selected=MPs[1])\n\n\n  })\n\n  observeEvent(input$nsim, {\n               if(input$nsim<48) shinyjs::disable(\"Parallel\")\n               if(input$nsim>47) shinyjs::enable(\"Parallel\")\n  })\n\n  namconv<-function(nam){\n    nam<-gsub(\" \",\"_\",nam)\n    nam<-gsub(\"[.]\",\"\",nam)\n    nam<-gsub(\",\",\"\",nam)\n    substr(nam,1,15)[[1]]\n  }\n\n  parseemail<-function(emailboxtext){\n    rmfrom<-strsplit(emailboxtext,\"From:\")[[1]][2]\n    lookforemail<-strsplit(rmfrom,\" \")[[1]]\n    temp<-grepl(\"@\",lookforemail)\n    if(sum(temp)==1){\n      email=lookforemail[temp]\n      firstslotmail<-match(T,temp)+1\n      #firstnl<-max(grep(\"\\n\",lookforemail))+1\n      body<-paste(lookforemail[firstslotmail:length(lookforemail)],collapse=\" \")\n      return(list(email=email,body=body))\n    }\n\n  }\n\n  observeEvent(input$Fcont,{\n\n    disable(\"Analysis_type2\")\n    MPs<<-getMPs()\n    updateSelectInput(session=session,inputId=\"AI_MP\",choices=MPs,selected=MPs[1])\n    #disable(selector = \"[type=Analysis_type][value=FIP]\")\n    #runjs(\"$('[type=Analysis][value=FIP]').parent().parent().addClass('disabled').css('opacity', 0.4)\")\n\n  })\n\n  observeEvent(input$emailsend,{\n\n    details<-parseemail(input$email)\n\n    test_email <- mime() %>%\n      to(c(\"t.carruthers@oceans.ubc.ca\",details$email)) %>%\n      from(\"edsappemailhelp@gmail.com\") %>%\n      subject(\"A question about EDS\") %>%\n      text_body(details$body)\n    send_message(test_email)\n\n    doprogress(\"Sending email\")\n\n  })\n\n\n  observeEvent(input$Load,{\n\n    filey<-input$Load\n    MSClog<-readRDS(file=filey$datapath)\n\n    PanelState<<-MSClog[[1]]\n    Just<<-MSClog[[2]]\n\n    for(i in 1:length(PanelState)){\n      for(j in 1:length(PanelState[[i]])) {\n        if(!(i==3&j==4)){ # not the radio button\n          state<-as.vector(unlist(PanelState[[i]][j]))\n          choices<-as.vector(unlist(get(MasterList[[i]][j])))\n          selected<-as.list(choices[state])\n          choices<-as.list(choices)\n          updateCheckboxGroupInput(session, as.character(inputnames[[i]][j]), selected = selected)\n        }\n      }\n    }\n\n    i<-3\n    j<-4\n    state<-as.vector(unlist(PanelState[[i]][j]))\n    choices<-as.vector(unlist(get(MasterList[[i]][j])))\n    selected<-as.list(choices[state])\n    choices<-as.list(choices)\n    updateRadioButtons(session, as.character(inputnames[[i]][j]), selected = selected)\n\n    updateTextInput(session, \"Name\",     value= MSClog[[3]]$Name)\n    updateTextInput(session, \"Species\",  value= MSClog[[3]]$Species)\n    updateTextInput(session, \"Region\",   value= MSClog[[3]]$Region)\n    updateTextInput(session, \"Agency\",   value= MSClog[[3]]$Agency)\n    updateTextInput(session, \"nyears\",   value= MSClog[[3]]$nyears)\n    updateTextInput(session, \"Author\",   value= MSClog[[3]]$Author)\n    updateTextInput(session, \"Justification\",value=Just[[1]][1])\n    updateTabsetPanel(session,\"tabs1\",selected=\"1\")\n    #=== DEBUGGING WINDOW =====================================================\n    #updateTextAreaInput(session,\"Debug\",value=choices)\n    #updateTextAreaInput(session,\"Debug2\",value=selected)\n    #updateTextAreaInput(session,\"Debug3\",value=inputId)\n    # ==========================================================================\n\n    Fpanel(1)\n    Mpanel(1)\n    Dpanel(1)\n    Calc(0)\n\n  })\n\n  getminmax<-function(panel,parameter,PanelState){\n    loc<-match(parameter,inputnames[[panel]])\n    mins<-get(paste0(parameter,\"_mins\"))\n    maxs<-get(paste0(parameter,\"_maxes\"))\n    cond<-unlist(PanelState[[panel]][loc])\n    range(mins[cond],maxs[cond])\n  }\n\n  makeOM<-function(PanelState,nsim=48){\n\n    OM<-testOM\n    OM@R0<-100000\n    OM@nsim<-nsim\n\n    OM@Linf<-c(3,3)\n    OM@L50<-c(1.3,2.4)\n    OM@L50_95<-c(0.2,0.2)\n    OM@isRel<-\"FALSE\"\n\n    OM@Name<-input$Name\n    OM@Species<-input$Species\n    OM@Region<-input$Region\n    OM@Agency<-input$Agency\n    if(is.na(as.integer(input$nyears))){\n      OM@nyears<-68\n    }else{\n      OM@nyears<-as.integer(input$nyears)\n    }\n    nyears<-OM@nyears\n\n    OM@Source<-input$Author\n    OM@interval<-input$interval\n    OM@proyears<-input$proyears\n\n    #save(OM,file=\"OM.Rdata\")  # debug\n\n    loc<-match(\"Err\",inputnames[[3]])\n    cond<-as.vector(unlist(PanelState[[3]][loc]))\n    Dquality<-as.vector(unlist(Err_list)[cond])\n\n\n    if(Dquality==\"Err_perf\"){\n      temp<-new('OM',Albacore,Generic_Fleet,Perfect_Info,Perfect_Imp)\n    }else if(Dquality==\"Err_good\"){\n      temp<-new('OM',Albacore,Generic_Fleet,Precise_Unbiased,Perfect_Imp)\n    }else if(Dquality==\"Err_mod\"){\n      temp<-new('OM',Albacore,Generic_Fleet,Generic_obs,Perfect_Imp)\n    }else{\n      temp<-new('OM',Albacore,Generic_Fleet,Imprecise_Biased,Perfect_Imp)\n    }\n    OM<-Replace(OM,temp,Sub=\"Obs\")\n\n    # Fishery characteristics -------\n    OM@M<-getminmax(1,\"M\",PanelState)\n    OM@D<-getminmax(1,\"D\",PanelState)\n    OM@h<-getminmax(1,\"h\",PanelState)\n\n    # Ftrend and error\n    loc<-match(\"FP\",inputnames[[1]])\n    cond<-(1:length(unlist(PanelState[[1]][loc])))[unlist(PanelState[[1]][loc])]\n    Ftype<<-sample(cond,nsim,replace=T)\n    M1sim<-M1s[Ftype]\n    M2sim<-M2s[Ftype]\n    sd1sim<-sd1s[Ftype]\n    sd2sim<-sd2s[Ftype]\n    h2sim<-h2s[Ftype]\n    Find<-array(NA,c(nsim,nyears))\n    for(i in 1:nsim)Find[i,]<-Ftrendfunc(M1sim[i],M2sim[i],sd1sim[i],sd2sim[i],h2sim[i],nyears)\n    Esd<-getminmax(1,\"F\",PanelState)\n    Esd_max<-Esd[2]\n    Esd_min<-Esd[1]\n    Esdrand<-runif(nsim,Esd_min,Esd_max)\n    Emu<-(-0.5*Esdrand^2)\n    Esdarray<-array(exp(rnorm(nsim*nyears,Emu,Esdrand)),c(nsim,nyears))\n    Find<-Find*Esdarray\n\n    # --- Selectivity -----------------------\n    Sel50<-getminmax(1,\"sel\",PanelState)\n    Sel50sim<-runif(nsim,Sel50[1],Sel50[2])\n    L5<-Sel50sim*0.8\n    LFS<-Sel50sim*1.2\n\n    OM@Vmaxlen<-getminmax(1,\"dome\",PanelState)\n    OM@DR<-getminmax(1,\"DR\",PanelState)\n    OM@Fdisc<-getminmax(1,\"PRM\",PanelState)\n    OM@Perr<-getminmax(1,\"sigR\",PanelState)\n    OM@qinc<-getminmax(1,\"q\",PanelState)\n    Arng<-getminmax(1,\"A\",PanelState)\n    Size_area_1<-Frac_area_1<-runif(nsim,Arng[1],Arng[2])\n    OM@Prob_staying<-1-getminmax(1,\"V\",PanelState)[2:1]\n\n    # Management parameters\n    OM@TACFrac<-OM@TAEFrac<-getminmax(2,\"IB\",PanelState)\n    OM@TACSD<-OM@TAESD<-getminmax(2,\"IV\",PanelState)\n\n    # Data parameters\n    CB_rng<-getminmax(3,\"CB\",PanelState)\n    Cbias<-runif(nsim,CB_rng[1],CB_rng[2])\n\n    OM@beta<-getminmax(3,\"Beta\",PanelState)\n\n    # Custom parameters\n    OM@cpars<-list(Find=Find, L5=L5, LFS = LFS,Size_area_1=Size_area_1,\n                   Frac_area_1=Frac_area_1,Cbias=Cbias)\n\n    saveRDS(OM,\"OM_autosave.rda\")\n    OM\n\n  }\n\n  Ptab<-function(MSEobj,MSEobj_FB,Eyr=10,rnd=0,Pcrit=0.2){\n\n    # PI 1.1.1\n    PI.111.a<-round(apply(MSEobj@B_BMSY[,,1:Eyr]>0.5,2,mean)*100,rnd)\n    PI.111.b<-round(apply(MSEobj@B_BMSY[,,1:Eyr]>1,2,mean)*100,rnd)\n\n    # PI 1.1.2\n    #MGT<-((-log(1-MSEobj@OM$L50/MSEobj@OM$Linf))/MSEobj@OM$K)+MSEobj@OM$t0\n    #2*MGT\n    MGT2<-ceiling(MSEobj@OM$MGT*2)\n    MGT2[MGT2<3]=3\n    Bind<-cbind(as.matrix(expand.grid(1:MSEobj@nsim,1:MSEobj@nMPs)),rep(MGT2,MSEobj@nMPs))\n    Bmat<-array(MSEobj@B_BMSY[Bind],c(MSEobj@nsim,MSEobj@nMPs))\n    PI.112<-round(apply(Bmat>1,2,mean)*100,rnd)\n\n    # PI 1.2.1\n    PI.121.a<-round(apply(MSEobj@B_BMSY[,,11:50]>0.5,2,mean)*100,rnd)\n    PI.121.b<-round(apply(MSEobj@B_BMSY[,,11:50]>1,2,mean)*100,rnd)\n\n    # PI 1.2.2\n    PI.122.a<-rep(0,MSEobj@nMPs)\n\n    for(i in 1:MSEobj@nMPs){\n\n      cond<-MSEobj_FB@B_BMSY[,i,1]<1 & MSEobj_FB@B_BMSY[,i,1]>0.1\n      dat<-data.frame(x=MSEobj_FB@B_BMSY[cond,i,1],y=MSEobj_FB@F_FMSY[cond,i,2])\n      temp<-lm(y~x,dat=dat)\n      stemp<-summary(temp)\n      Pval<-stemp$coefficients[2,4]\n      Slope<-stemp$coefficient[2,1]\n      pos<-Slope>0\n\n      if(pos& Pval<Pcrit)PI.122.a[i]<-1\n\n    }\n    PI.122.a <- c(\"F\",\"P\")[PI.122.a+1]\n\n    PI.122.b<-round(apply(MSEobj@F_FMSY[,,1:50]>0.5 &  MSEobj@F_FMSY[,,1:50]<1.5,2,mean)*100,rnd)\n\n    # LTY\n    refY<-sum(MSEobj@C[,1,11:50])\n    LTY<-round(apply(MSEobj@C[,,11:50],2,sum)/refY*100,rnd)\n    MP<-MSEobj@MPs\n\n    tab<-data.frame(MP,PI.111.a, PI.111.b, PI.112, PI.121.a, PI.121.b,\n                    PI.122.a, PI.122.b, LTY)\n\n    tab<-tab[order(tab$LTY,decreasing=T),]\n    tab\n\n  }\n\n\n  #                                       11a 11b 12  21a 21a 21b 22  LTY\n  Ptab_formatted<-function(Ptab1,thresh=c(80, 50, 50, 80, 50, \"P\",  60, 50)){\n\n    # save(Ptab1,file=\"Ptab1\")\n    MPs<-as.character(Ptab1$MP)\n\n    # Data Feasibility\n    cond<-unlist(PanelState[[3]][1]) # cond=rep(T,9)\n    FeasePos<-c(\"Catch\",\"Catch\",\"Index\",\"Index\",\"Index\",\"Catch_at_length\",\"Catch_at_age\",\"Growth\",\"Abundance\")\n    pot_slots<-unique(FeasePos)\n    got_slots<-unique(FeasePos[cond])\n    not_slots<-pot_slots[!pot_slots%in%got_slots]\n    tempFease<-new('Fease')\n    if(length(not_slots)>0)for(i in 1:length(not_slots))slot(tempFease,not_slots[i])<-0\n    DFeasible<-Fease(tempFease,1)\n    # MPs%in%DFeasible\n\n    # TAC TAE Feasibility\n    cond<-unlist(PanelState[[2]][1]) # cond=rep(T,4)\n    Data <- DLMtool::SimulatedData\n    runMPs <- applyMP(Data, MPs, reps = 2, nsims=1, silent=TRUE)\n    recs <- runMPs[[1]]\n    type <- matrix(0, nrow=length(MPs),ncol=4) # TAC TAE SL MPA\n    for (mm in seq_along(recs)) {\n      type[mm,1] <- as.integer(length(recs[[mm]]$TAC) > 0)\n      type[mm,2] <- as.integer(length(recs[[mm]]$Effort)>0)\n      type[mm,3] <- as.integer(length(recs[[mm]]$LR5)>0)\n      type[mm,4] <- as.integer(!is.na(recs[[mm]]$Spatial[1,1]))\n    }\n\n    DFeasible<-unique(c(DFeasible,MPs[(type[,4]==1|type[,3]==1) & apply(type,1,sum)==1])) # Size limits and area closures might not need data\n    totneeded<-apply(type,1,sum)\n    speced<-matrix(rep(as.integer(cond),each=length(MPs)),nrow=length(MPs))\n    MFeasible<-MPs[apply(speced*type,1,sum)==totneeded]\n\n    MP_Type<-rep(\"TAC\",length(MPs))\n    MP_Type[type[,2]==1]<-\"TAE\"\n    MP_Type[type[,3]==1]<-\"SzLim\"\n    MP_Type[type[,4]==1]<-\"MPA\"\n    MP_Type[totneeded>1]<-\"Mixed\"\n\n\n    Ptab2<-Ptab1 #[,1:ncol(Ptab1)]\n    Ptab2<-cbind(Ptab2[,1],MP_Type,Ptab2[,2:ncol(Ptab2)])\n    names(Ptab2)<-c(\"MP\",\"Type\",\"PI111a\",\"PI111b\",\"PI112\",\"PI121a\",\"PI121b\",\"PI122a\",\"PI122b\",\"LTY\")\n\n    PIsmet<-Ptab2$PI111a >= thresh[1] & Ptab2$PI111b >= thresh[2] & Ptab2$PI112 >= thresh[3] & Ptab2$PI121a >= thresh[4] & Ptab2$PI121b >= thresh[5] & Ptab2$PI122a == thresh[6] & Ptab2$PI122b >= thresh[7]\n    MPcols<-rep('black',length(MPs))\n    MPcols[MPs%in%MFeasible & MPs%in%DFeasible & PIsmet]<-'green'\n    MPcols[MPs%in%MFeasible & MPs%in%DFeasible & !PIsmet]<-'red'\n\n    feasible<-rep(\"\",length(MPs))\n    condD<-!MPs%in%DFeasible\n    condM<-!MPs%in%MFeasible\n    condDM<-condD&condM\n    feasible[condD]<-\"D\"\n    feasible[condM]<-\"M\"\n    feasible[condDM]<-\"D/M\"\n\n    Ptab2<-cbind(Ptab2,feasible)\n\n    # Rankings\n    rnkscore<-Ptab2$LTY\n    rnkscore[MPcols==\"green\"]=rnkscore[MPcols==\"green\"]+2000\n    rnkscore[MPcols==\"red\"]=rnkscore[MPcols==\"red\"]+1000\n    ord<-order(rnkscore,decreasing = T)\n    Ptab2<-Ptab2[ord,]\n    MPcols<-MPcols[ord]\n\n    Ptab2 %>%\n      mutate(\n        #MP = row.names(.),\n        MP =  cell_spec(MP, \"html\", color = MPcols),\n        Type =  cell_spec(Type, \"html\"),\n        PI111a = ifelse(PI111a >= thresh[1],\n                        cell_spec(PI111a, \"html\", color = \"green\"),\n                        cell_spec(PI111a, \"html\", color = \"red\")),\n        PI111b = ifelse(PI111b >= thresh[2],\n                        cell_spec(PI111b, \"html\", color = \"green\"),\n                        cell_spec(PI111b, \"html\", color = \"red\")),\n        PI112 = ifelse(PI112 >= thresh[3],\n                       cell_spec(PI112, \"html\", color = \"green\"),\n                       cell_spec(PI112, \"html\", color = \"red\")),\n        PI121a = ifelse(PI121a >= thresh[4],\n                        cell_spec(PI121a, \"html\", color = \"green\"),\n                        cell_spec(PI121a, \"html\", color = \"red\")),\n        PI121b = ifelse(PI121b >= thresh[5],\n                        cell_spec(PI121b, \"html\", color = \"green\"),\n                        cell_spec(PI121b, \"html\", color = \"red\")),\n        PI122a = ifelse(PI122a == thresh[6],\n                        cell_spec(PI122a, \"html\", color = \"green\"),\n                        cell_spec(PI122a, \"html\", color = \"red\")),\n        PI122b = ifelse(PI122b >= thresh[7],\n                        cell_spec(PI122b, \"html\", color = \"green\"),\n                        cell_spec(PI122b, \"html\", color = \"red\")),\n        LTY = ifelse(LTY >= thresh[8],\n                     cell_spec(LTY, \"html\", color = \"green\"),\n                     cell_spec(LTY, \"html\", color = \"red\")),\n        feasible =  cell_spec(feasible, \"html\")\n\n      )%>%\n      #select(everything())%>%\n      knitr::kable(\"html\", escape = F,align = \"c\") %>%\n      kable_styling(\"striped\", full_width = F)%>%\n      column_spec(5, width = \"3cm\") %>%\n      add_header_above(c(\" \", \" \",\"> 0.5 BMSY\" = 1, \"> BMSY\" = 1,\n                         \"> BMSY\"=1,\"> 0.5 BMSY\"=1,\"> BMSY\"=1,\"P/F\"=1,\n                         \"0.5 - 1.5 FMSY\"=1,\"vs FMSYref\"=1,\"not\"=1))%>%\n\n      add_header_above(c(\" \", \" \", \"Biomass (yrs 1-10)\" = 2, \"Biomass (2 MGT)\" = 1,\n                         \"Biomass (yrs 11-50)\"=2,\"F decrease w B\"=1,\n                         \"Fishing Mortality (yrs 1-50)\"=1,\n                         \"Yield (yrs 11-50)\"=1,\"Reason\"=1))%>%\n\n      add_header_above(c(\" \", \" \", \"Stock Status\" = 2, \"Rebuilding\" = 1,\n                         \"Harvest Strategy\"=2,\"HCR & Tools\"=2,\n                         \"Long-Term Yield\"=1,\" \"=1))\n\n  }\n\n  P1_LTY_plot<<-function(MSEobj){\n\n    Eyr<-10\n    rnd<-0\n\n    PI.111.a<-round(apply(MSEobj@B_BMSY[,,1:Eyr]>0.5,2,mean)*100,rnd)\n    refY<-sum(MSEobj@C[,1,11:50])\n    LTY<-round(apply(MSEobj@C[,,11:50],2,sum)/refY*100,rnd)\n    MP<-MSEobj@MPs\n    par(mai=c(0.8,0.8,0.1,0.1))\n    ylim<-c(0,max(LTY))\n    plot(c(-10,110),ylim,col='white',xlab=\"\",ylab=\"\")\n    mtext(\"Prob. Biomass > 0.5 BMSY, yrs 1-10 (PI.1.1.1a)\",1,line=2.5,cex=1.2)\n    mtext(\"Long term yield\",2,line=2.5,cex=1.2)\n    abline(v=c(0,100),col=\"#99999950\")\n    abline(h=c(0,100),col=\"#99999950\")\n\n    text(PI.111.a,LTY,MSEobj@MPs,col=icol,cex=1.2)\n\n  }\n\n  P2_LTY_plot<<-function(MSEobj){\n\n    rnd<-0\n    PI.121.a<-round(apply(MSEobj@B_BMSY[,,11:50]>0.5,2,mean)*100,rnd)\n    refY<-sum(MSEobj@C[,1,11:50])\n    LTY<-round(apply(MSEobj@C[,,11:50],2,sum)/refY*100,rnd)\n    MP<-MSEobj@MPs\n    par(mai=c(0.8,0.8,0.1,0.1))\n    ylim<-c(0,max(LTY))\n    plot(c(-10,110),ylim,col='white',xlab=\"\",ylab=\"\")\n    mtext(\"Prob. Biomass > 0.5 BMSY, yrs 11-50 (PI.1.2.1a)\",1,line=2.5,cex=1.2)\n    mtext(\"Long term yield\",2,line=2.5,cex=1.2)\n    abline(v=c(0,100),col=\"#99999950\")\n    abline(h=c(0,100),col=\"#99999950\")\n\n    text(PI.121.a,LTY,MSEobj@MPs,col=icol,cex=1.2)\n\n  }\n\n  wormplot_msc<-function(MSEobj){\n\n    par(mai=c(0.6,0.6,0.01,0.01))\n    wormplot(MSEobj)\n\n  }\n\n  HCRplot<-function(MSEobj,Pcrit=0.2){\n\n    nMPs<-MSEobj@nMPs\n    ncol=6\n    nrow=ceiling(nMPs/ncol)\n    par(mfrow=c(nrow,ncol),mai=c(0.4,0.4,0.01,0.01),omi=c(0.3,0.3,0.01,0.01))\n\n    for(i in 1:MSEobj@nMPs){\n\n      cond<-MSEobj_FB@B_BMSY[,i,1]<1 & MSEobj_FB@B_BMSY[,i,1]>0.1\n      plot(MSEobj_FB@B_BMSY[,i,1],MSEobj_FB@F_FMSY[,i,2],col=\"white\",pch=19,xlim=c(0,1.6),xlab=\"\",ylab=\"\",cex.axis=1.5)\n      points(MSEobj_FB@B_BMSY[!cond,i,1],MSEobj_FB@F_FMSY[!cond,i,2],col=\"#99999998\",pch=19)\n\n      dat<-data.frame(x=MSEobj_FB@B_BMSY[cond,i,1],y=MSEobj_FB@F_FMSY[cond,i,2])\n      temp<-lm(y~x,dat=dat)\n      stemp<-summary(temp)\n      pred<-predict(temp,newdata=data.frame(x=seq(0.1,1,length.out=20)))\n      Pval<-stemp$coefficients[2,4]\n      Slope<-stemp$coefficient[2,1]\n      pos<-Slope>0\n\n      col<-'red'\n      if(pos & Pval<Pcrit)col=\"green\"\n      points(MSEobj_FB@B_BMSY[cond,i,1],MSEobj_FB@F_FMSY[cond,i,2],col=col,pch=19)\n      lines(seq(0.1,1,length.out=20),pred,col=col)\n      legend('bottomright',legend=c(paste(\"pval=\",round(Pval,3)),paste(\"slope=\",round(Slope,3))),bty='n',cex=1.3)\n      legend('top',MSEobj@MPs[i],bty='n',text.font=2,cex=1.5)\n\n    }\n\n    mtext(\"F/FMSY\",2,line=0.3,outer=T)\n    mtext(\"B/BMSY\",1,line=0.3,outer=T)\n\n  }\n\n\n  getVOI<-function(MSEobj){\n\n    opt1<-  c(\"M\",        \"Depletion\",      \"hs\",      \"Esd\",          \"LFS\",        \"Vmaxlen\",  \"DR\",          \"PRM\",             \"procsd\",   \"qinc\",            \"Frac_area_1\",\"Prob_staying\",\n              \"TACFrac\", \"TACSD\",\"Cbias\",\"betas\")\n\n    opt2<-  c(rep(\"\",12),\"TAEFrac\", \"TAESD\",\"\",\"\",\"RefY\")\n\n    MSEtemp<-MSEobj\n    MSEtemp@OM<-cbind(MSEtemp@OM,betas=MSEtemp@Obs$betas,Cbias=MSEtemp@Obs$Cbias)\n    MSEtemp@OM<-MSEtemp@OM[,names(MSEtemp@OM)%in%opt1 | names(MSEtemp@OM)%in%opt2]\n    VOI(MSEtemp,ncomp=17,nbins=6)[[1]]\n\n  }\n\n  CCU_plot<-function(VOIout,MSEobj){\n\n    qno<-   c(\"F2\",       \"F3\",             \"F4\",       \"F6\",         \"F7\",       \"F8\",          \"F9\",              \"F10\",      \"F11\",             \"F12\",        \"F13\",          \"F14\",\n              \"M2\",       \"M3\",  \"D2\",    \"D3\")\n    qtext<- c(\"Longevity\",\"Stock depletion\",\"Resilence\",\"Exploit. Var.\",\"Selectivity\",\"Dome Sel.\",\"Discard rate\",\"Post. Rel. Mort.\",\"Rec. Var.\",\"Fish. efficiency\",\"MPA size\",   \"Mixing\",\n              \"Imp. over/under\",  \"Imp. Var.\", \"Cat. Rep. Bias.\",\"Hyperstability\")\n    opt1<-  c(\"M\",        \"Depletion\",      \"hs\",      \"Esd\",          \"LFS\",        \"Vmaxlen\",  \"DR\",          \"PRM\",             \"procsd\",   \"qinc\",            \"Frac_area_1\",\"Prob_staying\",\n              \"TACFrac\", \"TACSD\",\"Cbias\",\"betas\")\n    opt2<-  c(rep(\"\",12),\"TAEFrac\", \"TAESD\",\"\",\"\",\"RefY\")\n\n    nMPs<-MSEobj@nMPs\n    ncol=3\n    nrow=ceiling(nMPs/ncol)\n    par(mfrow=c(nrow,ncol),mai=c(1.8,0.4,0.01,0.01),omi=c(0.3,0.3,0.05,0.01))\n\n    for(i in 1:MSEobj@nMPs){\n      MP<-MSEobj@MPs[i]\n      dat<-VOIout[match(MP,VOIout[,1])+0:1,2:18]\n      lab1<-qno[match(as.factor(unlist(dat[1,])),opt1)]\n      lab2<-qno[match(as.factor(unlist(dat[1,])),opt2)]\n      lab1[is.na(lab1)]<-lab2[is.na(lab1)]\n      dat2<-aggregate(as.numeric(as.character(unlist(dat[2,]))),by=list(lab1),max)\n      dat2<-dat2[order(dat2$x,decreasing=T),]\n      labs<-paste(qno,qtext,sep=\" - \")\n      barplot(dat2[,2],names.arg=labs[match(dat2[,1],qno)], las=2,col=fcol,border=NA,cex.axis=1.4,cex.names=1.3)\n      legend('topright',MP,bty='n',text.font=2,cex=1.6)\n    }\n\n    mtext(\"Question / operating model characteristic\",1,outer=T,line=0.5)\n    mtext(\"Variability in Long Term Yield (% LTY)\",2,outer=T,line=0.5)\n\n  }\n\n  getMPs<-function(){\n\n    if(input$Analysis_type==\"Demo\"){\n      MPs<<-c('FMSYref','AvC','DCAC','curE','matlenlim','MRreal','MCD','MCD4010','DD4010')\n      #MPs<-c('FMSYref','DBSRA')#,'DCAC','curE','matlenlim')\n\n    }else{\n      MPs<<-avail('MP')\n      cond<-grepl(\"MLL\",MPs)|grepl('ML',MPs)|grepl('FMSYref',MPs)\n      #if(!input$Ref_MPs)cond<-cond|grepl('curE',MPs)|grepl('NFref',MPs)\n      MPs<-c('FMSYref',MPs[!cond])\n\n    }\n\n    if(input$Ex_Ref_MPs)MPs<-MPs[!MPs%in%c(\"FMSYref\",\"FMSYref75\",\"FMSYref50\",\"NFref\")]\n\n    MPs\n  }\n\n\n  observeEvent(input$Calculate,{\n\n    nsim<<-input$nsim\n    parallel=F\n    if(input$Parallel){\n      setup()\n      if(nsim>47)parallel=T\n    }\n    OM<<-makeOM(PanelState,nsim=nsim)\n\n    MPs<<-getMPs()\n\n    #tags$audio(src = \"RunMSE.mp3\", type = \"audio/mp3\", autoplay = NA, controls = NA)\n\n    withProgress(message = \"Running MSE\", value = 0, {\n      MSEobj<<-runMSE(OM,MPs=MPs,silent=T,control=list(progress=T),PPD=T,parallel=parallel)\n    })\n\n    OM_FB<-OM\n    OM_FB@cpars$D<-seq(0.05,0.4,length.out=OM@nsim)\n    OM_FB@proyears<-2\n    OM_FB@interval<-1\n    temp<-new('OM',Albacore,Generic_Fleet,Perfect_Info,Perfect_Imp)\n    OM_FB<-Replace(OM_FB,temp,Sub=\"Obs\")\n    OM_FB<-Replace(OM_FB,temp,Sub=\"Imp\")\n\n    withProgress(message = \"HCR evaluation\", value = 0, {\n      MSEobj_FB<<-runMSE(OM_FB,MPs=MPs,silent=T,control=list(progress=T),parallel=parallel)\n    })\n\n    save(MSEobj,file=\"MSEobj\")\n    save(MSEobj_FB,file=\"MSEobj_FB\")\n\n    # ==== Types of reporting ==========================================================\n\n    if(input$Analysis_type%in%c(\"Demo\",\"Cert\")){ # Certification or demo of certification\n\n      Ptab1<<-Ptab(MSEobj,MSEobj_FB,Eyr=10,rnd=0)\n      output$Ptable <- function()Ptab_formatted(Ptab1)\n      output$P1_LTY<-renderPlot(P1_LTY_plot(MSEobj),height=600,width=600)\n      output$P2_LTY<-renderPlot(P2_LTY_plot(MSEobj),height=600,width=600)\n      nMPs<-length(MSEobj@MPs)\n      output$wormplot<-renderPlot(Pplot3(MSEobj), height =ceiling(nMPs/6)*320 , width = 1300)#wormplot_msc(MSEobj))\n      output$HCR<-renderPlot(HCRplot(MSEobj_FB),height =ceiling(nMPs/6)*190 , width = 1300)\n      VOIout<<-getVOI(MSEobj)\n      output$CCU<-renderPlot(CCU_plot(VOIout,MSEobj),height=ceiling(nMPs/3)*290,width=1300)\n\n      test<-match(input$AI_MP,MPs)\n      if(is.na(test))mm<-1\n      if(!is.na(test))mm<-test\n\n      PPD<-MSEobj@Misc[[mm]]\n\n      tsd= c(\"Cat\",\"Cat\",\"Cat\",\"Ind\",\"Ind\",\"ML\", \"ML\")\n      stat=c(\"slp\",\"AAV\",\"mu\",\"slp\",\"mu\", \"slp\",\"mu\")\n      res<-6\n\n      indPPD<-getinds(PPD,styr=27,res=res,tsd=tsd,stat=stat)\n      indData<-matrix(indPPD[,1,1],ncol=1)\n\n      output$CC<-renderPlot(CC(indPPD,indData,pp=1,res=res),height=700,width=700)\n      output$MahD<-renderPlot(plot_mdist(indPPD,indData),height=400,width=400)\n\n\n    } else if(input$Analysis_type==\"FIP\"){ # FIP presentations\n\n\n    } else { # leaving just generic risk assessment\n\n\n    }\n    Calc(1)\n\n  })\n\n  observeEvent(input$D1,{\n    if(input$Calculate>0){\n    if(input$Analysis_type%in%c(\"Demo\",\"Cert\")){ # Certification or demo of certification\n\n      output$Ptable <- function()Ptab_formatted(Ptab1)\n\n    } else if(input$Analysis_type==\"FIP\"){ # FIP presentations\n\n\n    } else { # leaving just generic risk assessment\n\n\n    }\n    }\n\n  })\n\n  observeEvent(input$M1,{\n    if(input$Calculate>0){\n    if(input$Analysis_type%in%c(\"Demo\",\"Cert\")){ # Certification or demo of certification\n\n      output$Ptable <- function()Ptab_formatted(Ptab1)\n\n    } else if(input$Analysis_type==\"FIP\"){ # FIP presentations\n\n\n    } else { # leaving just generic risk assessment\n\n\n    }\n    }\n\n  })\n\n  # OM report\n  output$Build_OM <- downloadHandler(\n    # For PDF output, change this to \"report.pdf\"\n    filename = paste0(namconv(input$Name),\".html\"), #\"report.html\",\n    content = function(file) {\n      doprogress(\"Building OM report\",5)\n      OM<<-makeOM(PanelState,nsim=nsim)\n      src <- normalizePath('OMRep.Rmd')\n\n      Des<-list(Name=input$Name, Species=input$Species, Region=input$Region, Agency=input$Agency, nyears=input$nyears, Author=input$Author)\n      MSClog<-list(PanelState, Just, Des)\n\n      owd <- setwd(tempdir())\n      on.exit(setwd(owd))\n      file.copy(src, 'OMRep.Rmd', overwrite = TRUE)\n\n      library(rmarkdown)\n      params <- list(test = input$Name,\n                     set_title=paste0(\"Operating Model Specification Report for \",input$Name),\n                     set_type=switch(input$Analysis_type,\n                                     \"Demo\"=\"Demonstration certification analysis\",\n                                     \"Cert\" = \"MSC certification analysis\",\n                                     \"RE\" = \"Generic risk evaluation analysis\",\n                                     \"FIP\" = \"Fishery Improvement Project (FIP) analysis\"\n                                     ),\n\n                     PanelState=MSClog[[1]],\n                     Just=MSClog[[2]],\n                     Des=MSClog[[3]],\n                     OM=OM,\n                     inputnames=inputnames\n      )\n\n      out<-render(\"OMRep.Rmd\", params = params)\n      file.rename(out, file)\n\n    }\n  )\n\n\n  # MSE report\n  output$Build_Eval <- downloadHandler(\n    # For PDF output, change this to \"report.pdf\"\n    filename = paste0(namconv(input$Name),\"Eval.html\"), #\"report.html\",\n\n    content = function(file) {\n\n      src <- normalizePath('MSERep.Rmd')\n      doprogress(\"Building evaluation report\",4)\n      Des<-list(Name=input$Name, Species=input$Species, Region=input$Region, Agency=input$Agency, nyears=input$nyears, Author=input$Author)\n      MSClog<-list(PanelState, Just, Des)\n\n      owd <- setwd(tempdir())\n      on.exit(setwd(owd))\n      file.copy(src, 'MSERep.Rmd', overwrite = TRUE)\n\n      library(rmarkdown)\n      params <- list(test = input$Name,\n                     set_title=paste0(\"Evaluation Report for \",input$Name),\n                     set_type=switch(input$Analysis_type,\n                                     \"Demo\"=\"Demonstration certification analysis\",\n                                     \"Cert\" = \"MSC certification analysis\",\n                                     \"RE\" = \"Generic risk evaluation analysis\",\n                                     \"FIP\" = \"Fishery Improvement Project (FIP) analysis\"),\n\n                     PanelState=MSClog[[1]],\n                     Just=MSClog[[2]],\n                     Des=MSClog[[3]],\n                     OM=OM,\n                     MSEobj=MSEobj,\n                     MSEobj_FB=MSEobj_FB\n                     )\n\n      out<-render(\"MSERep.Rmd\", params = params)\n      file.rename(out, file)\n\n    }\n\n  )\n\n\n  output$Build_AI <- downloadHandler(\n    # For PDF output, change this to \"report.pdf\"\n    filename = paste0(namconv(input$Name),\"_AI.html\"), #\"report.html\",\n    content = function(file) {\n      doprogress(\"Building AI report\",3)\n      src <- normalizePath('AIRep.Rmd')\n\n      test<-match(input$AI_MP,MPs)\n      if(is.na(test))mm<-1\n      if(!is.na(test))mm<-test\n\n      Des<-list(Name=input$Name, Species=input$Species, Region=input$Region, Agency=input$Agency, nyears=input$nyears, Author=input$Author)\n      MSClog<-list(PanelState, Just, Des)\n\n      owd <- setwd(tempdir())\n      on.exit(setwd(owd))\n      file.copy(src, 'AIRep.Rmd', overwrite = TRUE)\n\n      library(rmarkdown)\n      params <- list(test = input$Name,\n                     set_title=paste0(\"Ancillary Indicator Analysis Report for \",input$Name),\n                     set_type=switch(input$Analysis_type,\n                                     \"Demo\"=\"Demonstration indicator analysis\",\n                                     \"Cert\" = \"MSC certification analysis\",\n                                     \"RE\" = \"Generic risk evaluation analysis\",\n                                     \"FIP\" = \"Fishery Improvement Project (FIP) analysis\"\n                                     ),\n\n                     PanelState=MSClog[[1]],\n                     Just=MSClog[[2]],\n                     Des=MSClog[[3]],\n                     OM=OM,\n                     inputnames=inputnames,\n                     MSEobj=MSEobj,\n                     mm=mm\n      )\n\n      out<-render(\"AIRep.Rmd\", params = params)\n      file.rename(out, file)\n\n    }\n  )\n\n\n  # Fishery panel reactions ============================================================================================================\n\n  UpJust<-function(){\n\n    if(input$tabs1==1){\n      updateTextAreaInput(session,\"Justification\",value=Just[[1]][Fpanel()])\n    }else if(input$tabs1==2){\n      updateTextAreaInput(session,\"Justification\",value=Just[[2]][Mpanel()])\n    }else if(input$tabs1==3){\n      updateTextAreaInput(session,\"Justification\",value=Just[[3]][Dpanel()])\n    }\n\n  }\n\n  RecJust<-function(){\n\n    if(input$tabs1==1 & Fpanel()>0 & Fpanel()<14){\n      Just[[1]][Fpanel()]<<-input$Justification\n    }else if(input$tabs1==2 & Mpanel()>0 & Mpanel()<4){\n      Just[[2]][Mpanel()]<<-input$Justification\n    }else if(input$tabs1==3 & Dpanel()>0 & Dpanel()<5){\n      Just[[3]][Dpanel()]<<-input$Justification\n    }\n\n  }\n\n  observeEvent(input$Justification,{\n    RecJust()\n  })\n\n\n  observeEvent(input$tabs1, {\n    UpJust()\n    Des<<-list(Name=input$Name, Species=input$Species, Region=input$Region, Agency=input$Agency, nyears=input$nyears, Author=input$Author)\n    MSCsave_auto()\n  })\n\n  observeEvent(input$Fback,{\n\n    if(input$tabs1==1 && Fpanel() >1){\n      Fpanel(Fpanel()-1)\n    }else if(input$tabs1==2 && Mpanel() >1){\n      Mpanel(Mpanel()-1)\n    }else if(input$tabs1==3 && Dpanel() >1){\n      Dpanel(Dpanel()-1)\n    }\n\n    UpJust()\n    Des<<-list(Name=input$Name,Region=input$Region, Agency=input$Agency, nyears=input$nyears, Author=input$Author)\n    MSCsave_auto()\n\n  })\n\n  observeEvent(input$Fcont,{\n\n    if(input$tabs1==1 && Fpanel() < 14){\n      Fpanel(Fpanel()+1)\n    }else if(input$tabs1==2 && Mpanel() < 3){\n      Mpanel(Mpanel()+1)\n    }else if(input$tabs1==3 && Dpanel() < 4){\n      Dpanel(Dpanel()+1)\n    }\n\n    # Write old values\n    UpJust()\n    Des<<-list(Name=input$Name,Region=input$Region, Agency=input$Agency, nyears=input$nyears, Author=input$Author)\n    MSCsave_auto()\n\n  })\n\n\n  # ---- Fishery all switches -----------------\n\n  observeEvent(input$All_M,\n     if(input$All_M == 0 | input$All_M%%2 == 0){\n       updateCheckboxGroupInput(session,\"M\",choices=M_list,selected=M_list)\n     }else{\n       updateCheckboxGroupInput(session,\"M\",choices=M_list)\n     }\n  )\n  observeEvent(input$All_D,\n     if(input$All_D == 0 | input$All_D%%2 == 0){\n        updateCheckboxGroupInput(session,\"D\",choices=D_list,selected=D_list)\n     }else{\n        updateCheckboxGroupInput(session,\"D\",choices=D_list)\n     }\n  )\n  observeEvent(input$All_h,\n     if(input$All_h == 0 | input$All_h%%2 == 0){\n        updateCheckboxGroupInput(session,\"h\",choices=h_list,selected=h_list)\n     }else{\n        updateCheckboxGroupInput(session,\"h\",choices=h_list)\n     }\n  )\n  observeEvent(input$All_FP,\n     if(input$All_FP == 0 | input$All_FP%%2 == 0){\n        updateCheckboxGroupInput(session,\"FP\",choices=FP_list,selected=FP_list)\n     }else{\n        updateCheckboxGroupInput(session,\"FP\",choices=FP_list)\n     }\n  )\n  observeEvent(input$All_F,\n     if(input$All_F == 0 | input$All_F%%2 == 0){\n        updateCheckboxGroupInput(session,\"F\",choices=F_list,selected=F_list)\n     }else{\n        updateCheckboxGroupInput(session,\"F\",choices=F_list)\n     }\n  )\n  observeEvent(input$All_sel,\n     if(input$All_sel == 0 | input$All_sel%%2 == 0){\n        updateCheckboxGroupInput(session,\"sel\",choices=sel_list,selected=sel_list)\n     }else{\n        updateCheckboxGroupInput(session,\"sel\",choices=sel_list)\n     }\n  )\n  observeEvent(input$All_dome,\n     if(input$All_dome == 0 | input$All_dome%%2 == 0){\n        updateCheckboxGroupInput(session,\"dome\",choices=dome_list,selected=dome_list)\n     }else{\n        updateCheckboxGroupInput(session,\"dome\",choices=dome_list)\n    }\n  )\n  observeEvent(input$All_DR,\n     if(input$All_DR == 0 | input$All_DR%%2 == 0){\n        updateCheckboxGroupInput(session,\"DR\",choices=DR_list,selected=DR_list)\n     }else{\n        updateCheckboxGroupInput(session,\"DR\",choices=DR_list)\n     }\n  )\n  observeEvent(input$All_PRM,\n    if(input$All_PRM == 0 | input$All_PRM%%2 == 0){\n        updateCheckboxGroupInput(session,\"PRM\",choices=PRM_list,selected=PRM_list)\n    }else{\n        updateCheckboxGroupInput(session,\"PRM\",choices=PRM_list)\n    }\n  )\n  observeEvent(input$All_sigR,\n     if(input$All_sigR == 0 | input$All_sigR%%2 == 0){\n        updateCheckboxGroupInput(session,\"sigR\",choices=sigR_list,selected=sigR_list)\n     }else{\n        updateCheckboxGroupInput(session,\"sigR\",choices=sigR_list)\n     }\n  )\n  observeEvent(input$All_q,\n     if(input$All_q == 0 | input$All_q%%2 == 0){\n        updateCheckboxGroupInput(session,\"q\",choices=q_list,selected=q_list)\n     }else{\n        updateCheckboxGroupInput(session,\"q\",choices=q_list)\n     }\n  )\n  observeEvent(input$All_A,\n    if(input$All_A  == 0 | input$All_A%%2 == 0){\n       updateCheckboxGroupInput(session,\"A\",choices=A_list,selected=A_list)\n    }else{\n       updateCheckboxGroupInput(session,\"A\",choices=A_list)\n    }\n  )\n  observeEvent(input$All_V,\n    if(input$All_V  == 0 | input$All_V%%2 == 0){\n       updateCheckboxGroupInput(session,\"V\",choices=V_list,selected=V_list)\n    }else{\n       updateCheckboxGroupInput(session,\"V\",choices=V_list)\n    }\n  )\n\n\n  # ---- Management all switches -------------\n\n  observeEvent(input$All_M1,\n               if(input$All_M1 == 0 | input$All_M1%%2 == 0){\n                 updateCheckboxGroupInput(session,\"M1\",choices=M1_list,selected=M1_list)\n               }else{\n                 updateCheckboxGroupInput(session,\"M1\",choices=M1_list)\n               }\n  )\n  observeEvent(input$All_IB,\n               if(input$All_IB == 0 | input$All_IB%%2 == 0){\n                 updateCheckboxGroupInput(session,\"IB\",choices=IB_list,selected=IB_list)\n               }else{\n                 updateCheckboxGroupInput(session,\"IB\",choices=IB_list)\n               }\n  )\n  observeEvent(input$All_IV,\n               if(input$All_IV == 0 | input$All_IV%%2 == 0){\n                 updateCheckboxGroupInput(session,\"IV\",choices=IV_list,selected=IV_list)\n               }else{\n                 updateCheckboxGroupInput(session,\"IV\",choices=IV_list)\n               }\n  )\n\n\n  # ---- Data all switches -------------\n\n  observeEvent(input$All_D1,\n               if(input$All_D1 == 0 | input$All_D1%%2 == 0){\n                 updateCheckboxGroupInput(session,\"D1\",choices=D1_list,selected=D1_list)\n               }else{\n                 updateCheckboxGroupInput(session,\"D1\",choices=D1_list)\n               }\n  )\n  observeEvent(input$All_CB,\n               if(input$All_CB == 0 | input$All_CB%%2 == 0){\n                 updateCheckboxGroupInput(session,\"CB\",choices=CB_list,selected=CB_list)\n               }else{\n                 updateCheckboxGroupInput(session,\"CB\",choices=CB_list)\n               }\n  )\n  observeEvent(input$All_Beta,\n               if(input$All_Beta == 0 | input$All_Beta%%2 == 0){\n                 updateCheckboxGroupInput(session,\"Beta\",choices=Beta_list,selected=Beta_list)\n               }else{\n                 updateCheckboxGroupInput(session,\"Beta\",choices=Beta_list)\n               }\n  )\n  observeEvent(input$All_Err,\n\n              updateRadioButtons(session,\"Err\",choices=Err_list,selected=\"Err_bad\")\n\n  )\n\n  # ======================= Calculation ========================================\n\n\n\n  # ======================= Explanatory Plots ===================================\n\n  # -------------- Scheme --------------------\n\n  fcol = rgb(0.4,0.8,0.95)#\"#0299f\"\n  fcol2 = \"dark grey\"\n  icol <- \"dodgerblue4\"\n  maxcol=\"cadetblue\"\n  mincol=\"dark grey\"\n\n  # -------------- Fishery -------------------\n\n  plotM <- function(dummy=1){\n\n    par( mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n    M_nams<-unlist(M_list)#c(\"M_60\", \"M_40_60\",\"M_20_40\",\"M_10_20\",\"M_05_10\",\"M_05\")\n\n    cond<-M_nams%in%input$M\n\n    if(sum(cond)>0){\n\n      M_max<-max(M_maxes[cond])\n      M_min<-min(M_mins[cond])\n\n      maxa<- -log(0.02)/M_min\n      mina<- -log(0.02)/M_max\n      maxage<-floor(maxa*1.1)\n      UB<-exp(-M_min*((1:maxage)-1))\n      LB<-exp(-M_max*((1:maxage)-1))\n\n      plot(c(1,maxage),c(0,1),col=\"white\",xlab=\"\",ylab=\"\")\n      mtext(\"Age\",1,line=2)\n      mtext(\"Survival\",2,line=2)\n      polygon(c(1:maxage,maxage:1),c(LB,UB[maxage:1]),border=NA,col=fcol)\n      abline(v=c(mina,maxa),lty=2,col=icol)\n\n      text(mina+(maxa-mina)/2,0.95,\" Range max age \",col=icol)\n      text(mina+(maxa-mina)/2,0.88,paste(round(mina,1), \"-\",round(maxa,1),\"years\"),col=icol)\n      text(mina+(maxa-mina)/2,0.81,paste(M_max, \"> M >\",M_min),col=icol)\n\n\n    }else{\n\n      plot(c(1,20),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(10,0.5,\"< unspecified >\",col=\"grey\")\n\n    }\n\n  }\n\n  output$plotM <- renderPlot(plotM())\n\n  plotD <- function(dummy=1){\n\n    D_nams<-unlist(D_list)#c(\"D_10\", \"D_10_20\",\"D_20_30\",\"D_30_60\",\"D_60_80\",\"D_80\")\n\n    cond<-D_nams%in%input$D\n\n    if(sum(cond)>0){\n      par(mfrow=c(1,2),mai=c(0.3,0.5,0.01,0.01), omi=c(0.4,0.18,0.55,0.1),cex.main = 1.5, cex.lab=1.35 )\n      D_max<-max(D_maxes[cond])\n      D_min<-min(D_mins[cond])\n\n      set.seed(1)\n\n      ts1<-(2+(cos((-0:60)/10.18))/3)*exp(rnorm(61,0,0.2))\n      ts1<-ts1/mean(ts1[1:5])\n\n      ts2<-(2+(cos((10:40)/4.18)/4))*exp(rnorm(31,0,0.1))\n      ts2<-ts2/mean(ts2[1:5])\n\n      # plot TS1\n      yrs<-2017-(length(ts1):1)-1\n      ny<-length(yrs)\n\n      Dmaxs<-seq(1,D_max,length.out=ny)\n      Dmins<-seq(1,D_min,length.out=ny)\n\n      UB<-Dmaxs*ts1\n      LB<-Dmins*ts1\n\n      plot(yrs[c(1,ny)],c(0,1.2),col=\"white\",xlab=\"\",ylab=\"\")\n      abline(h=c(D_max,D_min),lty=2,col=icol)\n      abline(h=1)\n      polygon(c(yrs,yrs[ny:1]),c(LB,UB[ny:1]),border=NA,col=fcol)\n\n      mtext(\"Example 1\",3,line=0.8)\n\n      # plot TS2\n      yrs<-2017-(length(ts2):1)-1\n      ny<-length(yrs)\n\n      Dmaxs<-seq(1,D_max,length.out=ny)\n      Dmins<-seq(1,D_min,length.out=ny)\n\n      UB<-Dmaxs*ts2\n      LB<-Dmins*ts2\n\n      plot(yrs[c(1,ny)],c(0,1.2),col=\"white\",xlab=\"\",ylab=\"\")\n      abline(h=c(D_max,D_min),lty=2,col=icol)\n      abline(h=1)\n      polygon(c(yrs,yrs[ny:1]),c(LB,UB[ny:1]),border=NA,col=fcol)\n\n      mtext(\"Example 2\",3,line=0.8)\n      #text(mina+(maxa-mina)/2,0.95,\" Range max age \",col='orange')\n      #text(mina+(maxa-mina)/2,0.88,paste(round(mina,1), \"-\",round(maxa,1)),col='orange')\n      #text(mina+(maxa-mina)/2,0.81,paste(M_max, \"> M >\",M_min),col='orange')\n      mtext(\"Year\",1,line=1,outer=T)\n      mtext(\"Spawn. bio. relative to unfished (D)\",2,line=0,outer=T)\n\n\n    }else{\n      par(mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n      plot(c(1,20),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(10,0.5,\"< unspecified >\", col=\"grey\")\n\n    }\n\n  }\n\n  output$plotD <- renderPlot(plotD())\n\n  ploth <- function(dummy=1){\n\n    par(mfrow=c(1,1), mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n    h_nams<-unlist(h_list)#c(\"h_30\", \"h_30_50\",\"h_50_70\",\"h_70_90\",\"h_90\")\n\n    cond<-h_nams%in%input$h\n\n    if(sum(cond)>0){\n\n      h_max<-max(h_maxes[cond])\n      h_min<-min(h_mins[cond])\n\n      np<-100\n      D<-seq(0,1,length.out=np)\n      UB<-(0.8*h_max*D)/(0.2*(1-h_max)+(h_max-0.2)*D)\n      LB<-(0.8*h_min*D)/(0.2*(1-h_min)+(h_min-0.2)*D)\n\n      plot(c(0,1),c(0,1),col=\"white\",xlab=\"\",ylab=\"\")\n      mtext(\"Stock depletion (spawning biomass relative to unfished)\",1,line=2)\n      mtext(\"Fraction of unfished recruitment\",2,line=2)\n      polygon(c(D,D[np:1]),c(LB,UB[np:1]),border=NA,col=fcol)\n      abline(v=0.2,col=icol)\n      abline(h=c(h_min,h_max),col=icol,lty=2)\n\n    }else{\n\n      plot(c(1,20),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(10,0.5,\"< unspecified >\",col=\"grey\")\n\n    }\n\n  }\n\n  output$ploth <- renderPlot(ploth())\n\n  Ftrendfunc<-function(M1=0.2,M2=1.2,sd1=0.1,sd2=0.3,h2=2,ny=68,plot=F){\n\n    E<-rep(NA,ny)\n    ind1<-1:floor(M1*ny)\n    d1<-dnorm(ind1,M1*ny,sd1*ny)\n    E[ind1]<-d1/max(d1)\n    ind12<-(floor(M1*ny)+1):ceiling(M2*ny)\n    ind12<-ind12[ind12<=ny]\n    E[ind12]<-1\n    d2<-dnorm(ind12,M2*ny,sd2*ny)\n    E[ind12]<-E[ind12]+(d2/max(d2))*h2\n\n    ind2<-(ceiling(M2*ny)+1):ny\n    if(ind2[1]<ind2[2]){\n      E[ind2]<-dnorm(ind2,M2*ny,sd2*ny)\n      E[ind2]<-E[ind2]/max(E[ind2])*max(E[ind12])\n    }\n\n    E<-E/mean(E)\n    if(plot)plot(E,ylim=c(0,max(E)*1.05),type=\"l\")\n    E\n\n  }\n\n  plotFP <-function(dummy=1){\n\n    par(mfrow=c(1,1), mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n    FP_nams<-unlist(FP_list)#c(\"FP_s\", \"FP_gr\",\"FP_bb\",\"FP_gi\",\"FP_ri\",\"FP_rd\")\n    ny=60\n\n    trends<-array(NA,c(6,ny))\n    # par(mfrow=c(3,2),mar=rep(0.1,4))\n    for(i in 1:6)trends[i,]<-Ftrendfunc(M1=M1s[i],M2=M2s[i],sd1=sd1s[i],sd2=sd2s[i],h2=h2s[i],ny=ny)\n    cols<-rep(c(fcol,'black','dark grey'),2)\n    ltys<-rep(c(1,2),each=3)\n\n    cond<-FP_nams%in%input$FP\n    trends[!cond,]<-NA\n\n    if(sum(cond)>0){\n\n      plot(c(0,ny),c(0,max(trends,na.rm=T)),col=\"white\",xlab=\"\",ylab=\"\",axes=F)\n      axis(2)\n      axis(1,c(-10e6,10e6),c(-10e6,10e6))\n      mtext(\"Historical year\",1,line=2)\n      mtext(\"Relative exploitation rate (Effort)\",2,line=2)\n      for(i in (1:6)[cond])lines(trends[i,],col=cols[i],lty=ltys[i])\n      legend('topleft',legend=names(FP_list)[cond],text.col=cols[cond],lty=ltys[cond],col=cols[cond],bty='n',cex=0.8)\n\n    }else{\n\n      plot(c(1,ny),c(0,2),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(ny/2,1,\"< unspecified >\",col=\"grey\")\n\n    }\n\n  }\n\n  output$plotFP <- renderPlot(plotFP())\n\n  plotF <- function(dummy=1){\n\n    FP_nams<-unlist(FP_list)#c(\"FP_s\", \"FP_gr\",\"FP_bb\",\"FP_gi\",\"FP_ri\",\"FP_rd\")\n\n    ny=60\n\n    trends<-array(NA,c(6,ny))\n    # par(mfrow=c(3,2),mar=rep(0.1,4))\n    for(i in 1:6)trends[i,]<-Ftrendfunc(M1=M1s[i],M2=M2s[i],sd1=sd1s[i],sd2=sd2s[i],h2=h2s[i],ny=ny)\n    cond<-FP_nams%in%input$FP\n\n    F_nams<-unlist(F_list)#c(\"F_10\", \"F_10_25\",\"F_25_50\")\n\n    cond2<-F_nams%in%input$F\n\n    if(sum(cond)>0&sum(cond2)>0){\n      par(mfrow=c(1,2),mai=c(0.3,0.5,0.01,0.01), omi=c(0.4,0.4,0.55,0.1),cex.main = 1.5, cex.lab=1.35 )\n\n      #trends<-trends[cond,]\n      simbyt<-100\n      nsim<-simbyt*6\n\n      Esd_max<-max(F_maxes[cond2])\n      Esd_min<-min(F_mins[cond2])\n      Esdrand<-runif(nsim,Esd_min,Esd_max)\n      Emu<-(-0.5*Esdrand^2)\n      Esdarray<-array(exp(rnorm(nsim*ny,Emu,Esdrand)),c(nsim,ny))\n      Eind<-as.matrix(expand.grid(1:nsim,1:ny))\n      Tind<-cbind(rep(1:6,each=simbyt),Eind[,2])\n      stochtrends<-array(NA,c(nsim,ny))\n      stochtrends[Eind]<-Esdarray[Eind]*trends[Tind]\n      stochtrends<-stochtrends/apply(stochtrends,1,mean)\n\n      plot(c(1,ny),c(0,quantile(stochtrends,0.98)),col=\"white\",xlab=\"\",ylab=\"\")\n      B90s<-apply(stochtrends[rep(cond,each=simbyt),],2,quantile,p=c(0.05,0.95))\n      B50s<-apply(stochtrends[rep(cond,each=simbyt),],2,quantile,p=c(0.25,0.75))\n\n      #med<-apply(stochtrends,2,quantile,p=0.5)\n      #matplot(t(stochtrends),col=\"#99999920\",type=\"l\")\n      polygon(c(1:ny,ny:1),c(B90s[1,],B90s[2,ny:1]),border=NA,col=fcol)\n      polygon(c(1:ny,ny:1),c(B50s[1,],B50s[2,ny:1]),border=NA,col=icol)\n      #lines(1:ny,med,col='white',lwd=2)\n      legend('topleft',legend=c('90% PI',\"50% PI\"),fill=c(fcol,icol),bty='n',border='white')\n      mtext(\"Historical year\",1,line=0.45,outer=T)\n      mtext(\"Relative exploitation (Effort)\",2,line=2)\n      mtext(\"Simulated range\",3,line=0.8)\n\n      # Example plots\n      maxind<-(((0:5)*100)+aggregate(Esdrand,by=list(rep(1:6,each=simbyt)),which.max)$x)[cond]\n      minind<-(((0:5)*100)+aggregate(Esdrand,by=list(rep(1:6,each=simbyt)),which.min)$x)[cond]\n\n      cols<-rep(c(fcol,'black','dark grey'),2)\n      ltys<-rep(c(1,2),each=3)\n\n      plot(c(1,ny),c(0,quantile(stochtrends,0.98)),col=\"white\",xlab=\"\",ylab=\"\")\n      if(sum(cond)==1){\n        lines(1:ny,stochtrends[maxind,],col=cols[cond],lty=ltys[cond])\n        lines(1:ny,stochtrends[minind,],col=cols[cond],lty=ltys[cond])\n      }else{\n        matplot(1:ny,t(stochtrends[maxind,]),add=T,col=cols[cond],lty=ltys[cond],type='l')\n        matplot(1:ny,t(stochtrends[minind,]),add=T,col=cols[cond],lty=ltys[cond],type='l')\n      }\n\n      mtext(\"\",1,line=2)\n      mtext(\"\",2,line=2)\n\n      #legend('topleft',legend=names(FP_list)[cond],text.col=cols[cond],lty=ltys[cond],col=cols[cond],bty='n',cex=0.8)\n      mtext(\"Examples\",3,line=0.8)\n\n    }else{\n      plot(c(1,ny),c(0,2),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      if(sum(cond)==0){\n        text(ny/2,1,\"< Answer question 4 >\",col=\"grey\")\n      }else{\n        text(ny/2,1,\"< Unspecified >\",col=\"grey\")\n      }\n\n    }\n\n  }\n\n  output$plotF <- renderPlot(plotF())\n\n  plotsel <- function(dummy=1){\n\n    par( mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n    sel_nams<-unlist(sel_list)#c(\"sel_50\", \"sel_50_75\",\"sel_75_125\",\"sel_125_150\",\"sel_150_200\")\n    cond<-sel_nams%in%input$sel\n\n    if(sum(cond)>0){\n\n      sel_max<-max(sel_maxes[cond])\n      sel_min<-min(sel_mins[cond])\n      lengths<-seq(0.05,3.5,length.out=100)\n\n      mat<-1/(1+exp(-((lengths-1)/0.1)))\n\n      sel1<-1/(1+exp(-((lengths-sel_min)/(sel_min*0.1))))\n      sel2<-1/(1+exp(-((lengths-sel_max)/(sel_max*0.1))))\n\n      par( mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n\n      plot(c(0,3.5),c(0,1),col=\"white\",xlab=\"\",ylab=\"\")\n      polygon(c(lengths,lengths[100:1]),c(sel1,sel2[100:1]),border=NA,col=fcol)\n      abline(h=0.5)\n\n      lines(lengths,mat,col=icol)\n      mtext(\"Length relative to length at 50% maturity (S)\",1,line=2)\n      mtext(\"Selectivity\",2,line=2)\n      legend('bottomright',legend=c(\"Selectivity\",\"Maturity\"),fill=c(fcol,icol),bty='n',cex=0.8,border='white')\n      abline(v=c(sel_min,sel_max),col=fcol,lty=2)\n      abline(v=1,col=icol,lty=2)\n\n    }else{\n      plot(c(0,3.5),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(1.75,0.5,\"< Unspecified >\",col=\"grey\")\n    }\n\n  }\n\n  output$plotsel <- renderPlot(plotsel())\n\n  dnormal<-function(lens,lfs,sl,sr){\n    cond<-lens<=lfs\n    sel<-rep(NA,length(lens))\n    sel[cond]<-2.0^-((lens[cond]-lfs)/sl*(lens[cond]-lfs)/sl)\n    sel[!cond]<-2.0^-((lens[!cond]-lfs)/sr*(lens[!cond]-lfs)/sr)\n    sel\n  }\n\n  getsel<-function(lens,lenmax,sl,Vmaxlen){\n    sr<-(max(lens)-lenmax)/((-log(Vmaxlen,2))^0.5) # upper standard deviation of double log normal\n    dnormal(lens,lenmax,sl,sr)\n  }\n\n\n  plotdome <- function(dummy=1){\n\n    par(mfrow=c(1,1), mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n    dome_nams<-unlist(dome_list)#c(\"dome_100\", \"dome_75_100\",\"dome_25_75\",\"dome_25\")\n    cond<-dome_nams%in%input$dome\n\n    if(sum(cond)>0){\n\n      dome_max<-max(dome_maxes[cond])\n      dome_min<-min(dome_mins[cond])\n      lens<-seq(0.05,3.5,length.out=100)\n\n      sel1<-getsel(lens,1,0.1,dome_min)\n      sel2<-getsel(lens,1,0.1,dome_max)\n\n      par( mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n\n      plot(c(0,3.5),c(0,1),col=\"white\",xlab=\"\",ylab=\"\",axes=F)\n      axis(2)\n      axis(1,c(-10,10),c(-10,10))\n      polygon(c(lens,lens[100:1]),c(sel1,sel2[100:1]),border=NA,col=fcol)\n      lines(lens,sel1)\n      lines(lens,sel2)\n\n      mtext(\"Length\",1,line=2)\n      mtext(\"Selectivity of oldest length (SL)\",2,line=2)\n      abline(h=c(dome_min,dome_max),col=icol,lty=2)\n\n\n    }else{\n      plot(c(0,3.5),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(1.75,0.5,\"< Unspecified >\",col=\"grey\")\n    }\n\n\n  }\n\n  output$plotdome <- renderPlot(plotdome())\n\n  fishy<-function(x=0,y=0,scale=1,res=20,border=\"black\",col='white',lwd=1,dead=F,reflect=F){\n\n    x1<-seq(0,0.4,length.out=res)\n    x2<-seq(0.41,0.8,length.out=res)\n    x3t<-seq(-0.5,0,length.out=res)\n    x3<-(x3t)*0.4+1\n    x4<-((x3/3)+0.6666)[res:1]\n    tf<-((1/(1+10*(0.4-x1)^4))*(3/2)-0.692)\n    bf<-1-tf\n    tr<-((1/(1+10*(x2-0.4)^2)))*(0.48)+0.326\n    br<-1-tr\n    tt<-(-(x3t)^2)*1.3+0.835\n    bt<-1-tt\n    xs=c(x1,x2,x3,x4,x4[res:1],x3[res:1],x2[res:1],x1[res:1])\n    ys=c(tf,tr,tt,tt[res:1],bt,bt[res:1],br[res:1],bf[res:1])\n    if(reflect)xs=1-xs\n    xs<-(xs-0.5)*scale+x\n    ys<-(ys-0.5)*scale+y\n\n\n    polygon(xs,ys,col=col,border=border,lwd=lwd)\n\n  }\n\n  boaty<-function(x,y,scale=1,res=20,border=\"black\",col=\"white\",lwd=1){\n\n    x1<-seq(0,0.3,length.out=res)\n    bf<-1+0.53-(1/(1+10*(0.4-x1)^4))*1.3\n\n    x2<-c(0,   0.2,0.25,0.5,0.5,1,  1,0.3)\n    rest<-c(0.5,0.5,0.7, 0.7,0.5,0.5,0.23,0.23)\n\n    xs<-c(x2,x1[res:1])\n    ys<-c(rest,bf[res:1])\n\n    xs<-(xs-0.5)*scale+x\n    ys<-(ys-0.5)*scale+y\n\n    polygon(xs,ys,col=col,border=border,lwd=lwd)\n\n  }\n\n  fishgrid<-function(xlim,ylim,nfish,col=\"green\",border=\"green\",lwd=2){\n\n    xl<-seq(xlim[1],xlim[2],length.out=7)[2:6]\n    yl<-seq(ylim[1],ylim[2],length.out=4)[2:3]\n    ind<-expand.grid(1:5,1:2)\n    for(i in 1:nfish)fishy(xl[ind[i,1]],yl[ind[i,2]],scale=0.075,col=col,border=border)\n\n  }\n\n  DRplot<-function(DR){\n\n    dfish<-floor(DR*10)\n    cfish<-10-dfish#ceiling((1-DM)*10)\n\n    plot(c(-0.5,0.5),c(-0.5,0.5),col='white',axes=F,xlab=\"\",ylab=\"\")\n    abline(h=0.25)\n    boaty(-0.1,0.38,0.8,col=\"white\",border=\"black\")\n    fishgrid(c(-0.35,0.35),c(0.12,0.42),cfish,col=icol,border=icol)\n\n    if(dfish>0){ #fishgrid(c(-0.6,0.05),c(-0.3,0.0),dfish,col=icol,border=icol)\n\n      xs<-c(0.3, 0.45, 0.2, 0.25, 0.18, 0.16, 0.21,  0.29, 0.35, 0.41)+0.03\n      ys<-c(-0.3,-0.45,-0.25,-0.1,-0.45, -0.28,-0.35, -0.2, -0.1, -0.4)\n      ref<-c(F,F,F,T,T,F,T,F,T,F)\n      plotf<-sample(1:10,dfish)\n      for(i in plotf){\n        fishy(xs[i],ys[i],scale=0.075,col=fcol,border=fcol,reflect=ref[i])\n      }\n\n    }\n\n    arrows(x0=0.1,x1=0.2,y0=0.12,y1=-0.03,col=fcol,lwd=2,length=0.1)\n    text(0.31,0.08,\"DR\",font=2,col=fcol)\n\n    #arrows(x0=0.13,x1=0.01,y0=-0.28,y1=-0.25,col='black',lwd=2,length=0.1)\n    #text(0.0,-0.4,\"PRM\",font=2)\n\n  }\n\n\n  PRMplot<-function(PRM){\n\n    dfish<-floor(PRM*10)\n    cfish<-10-dfish#ceiling((1-DM)*10)\n\n    plot(c(-0.5,0.5),c(-0.5,0.5),col='white',axes=F,xlab=\"\",ylab=\"\")\n    abline(h=0.25)\n    boaty(-0.1,0.38,0.8,col=\"white\",border=\"black\")\n    #fishgrid(c(-0.35,0.35),c(0.12,0.42),cfish,col=icol,border=icol)\n    fishgrid(c(-0.6,0.05),c(-0.3,0.0),dfish,col=icol,border=icol)\n    if(cfish>0){\n\n      xs<-c(0.3, 0.45, 0.2, 0.25, 0.18, 0.16, 0.21,  0.29, 0.35, 0.41)+0.03\n      ys<-c(-0.3,-0.45,-0.25,-0.1,-0.45, -0.28,-0.35, -0.2, -0.1, -0.4)\n      ref<-c(F,F,F,T,T,F,T,F,T,F)\n      plotf<-sample(1:10,cfish)\n      for(i in plotf){\n        fishy(xs[i],ys[i],scale=0.075,col=fcol,border=fcol,reflect=ref[i])\n      }\n\n    }\n\n    arrows(x0=0.1,x1=0.2,y0=0.12,y1=-0.03,col=fcol,lwd=2,length=0.1)\n    text(0.31,0.08,\"DR\",font=2,col=fcol)\n\n    arrows(x0=0.13,x1=0.01,y0=-0.28,y1=-0.25,col='black',lwd=2,length=0.1)\n    text(0.0,-0.4,\"PRM\",font=2,col=icol)\n\n  }\n\n\n\n  plotDR <- function(dummy=1){\n\n    DR_nams<-unlist(DR_list)#c(\"DM_1\", \"DM_1_10\",\"DM_10_30\",\"DM_30_50\",\"DM_50_70\")\n\n    cond<-DR_nams%in%input$DR\n\n    if(sum(cond)>0){\n\n      par(mfrow=c(1,2),mai=c(0.01,0.2,0.01,0.01), omi=c(0.4,0.01,0.55,0.01), cex.main = 1.5, cex.lab=1.35 )\n\n      DR_max<-max(DR_maxes[cond])\n      DR_min<-min(DR_mins[cond])\n\n      DRplot(DR_min)\n      mtext(paste0(\"Lowest rate = \",round(DR_min*100),\"%\"),3,line=2)\n      DRplot(DR_max)\n      mtext(paste0(\"Highest rate = \",round(DR_max*100),\"%\"),3,line=2)\n\n    }else{\n      plot(c(0,3.5),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(1.75,0.5,\"< Unspecified >\",col=\"grey\")\n      #text(1.75,0.25,input$DR,col=\"grey\")\n      #text(1.75,0.75,DR_nams,col=\"grey\")\n    }\n\n  }\n\n  output$plotDR <- renderPlot(plotDR())\n\n  plotPRM <- function(dummy=1){\n\n    PRM_nams<-unlist(PRM_list)#c(\"PRM_1\", \"PRM_1_10\",\"PRM_10_30\",\"PRM_30_50\",\"PRM_50_70\")\n\n    cond<-PRM_nams%in%input$PRM\n\n    if(sum(cond)>0){\n\n      par(mfrow=c(1,2),mai=c(0.01,0.2,0.01,0.01), omi=c(0.4,0.01,0.55,0.01), cex.main = 1.5, cex.lab=1.35 )\n\n      PRM_max<-max(PRM_maxes[cond])\n      PRM_min<-min(PRM_mins[cond])\n\n      PRMplot(PRM_min)\n      mtext(paste0(\"Lowest rate = \",round(PRM_min*100),\"%\"),3,line=2)\n      PRMplot(PRM_max)\n      mtext(paste0(\"Highest rate = \",round(PRM_max*100),\"%\"),3,line=2)\n\n    }else{\n      plot(c(0,3.5),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(1.75,0.5,\"< Unspecified >\",col=\"grey\")\n      #text(1.75,0.25,input$DM,col=\"grey\")\n      #text(1.75,0.75,DM_nams,col=\"grey\")\n    }\n\n  }\n\n  output$plotPRM <- renderPlot(plotPRM())\n\n  plotsigR <- function(dummy=1){\n\n    sigR_nams<- unlist(sigR_list)#c(\"sigR_10\", \"sigR_10_30\",\"sigR_30_60\",\"sigR_60_90\",\"sigR_90\")\n\n    cond<-sigR_nams%in%input$sigR\n\n    if(sum(cond)>0){\n\n      layout(matrix(c(1,2,3),nrow=1),widths=c(2,2,1))\n      par(mai=c(0.3,0.5,0.01,0.01), omi=c(0.4,0.01,0.55,0.01), cex.main = 1.5, cex.lab=1.35 )\n      maxcol<-fcol\n      mincol<-icol\n      mucol<-\"black\"\n      pch=19\n      ny<-40\n      yord<-order(runif(ny))\n      sigR_max<-max(sigR_maxes[cond])\n      sigR_min<-min(sigR_mins[cond])\n      hh<-0.45\n      D<-seq(0,1,length.out=ny)\n      murec<-(0.8*hh*D)/(0.2*(1-hh)+(hh-0.2)*D)\n      muR_max<--0.5*sigR_max^2\n      muR_min<--0.5*sigR_min^2\n      ld_max<-rnorm(ny,muR_max,sigR_max)\n      ld_min<-rnorm(ny,muR_min,sigR_min)\n      rd_max<-exp(ld_max)\n      rd_min<-exp(ld_min)\n      recs_max<-rd_max*murec\n      recs_min<-rd_min*murec\n\n      plot(D,murec,ylim=c(0,quantile(c(rd_max,rd_min),0.95)),type=\"l\",lwd=2,xlab=\"\",ylab=\"\",col=mucol,axes=F)\n      axis(1)\n      axis(2)\n      mtext(\"SSB relative to unfished\",1,line=2.5)\n      mtext(\"Recruitment relative to unfished\",2,line=2.5)\n      points(D,recs_max,col=maxcol,pch=pch)\n      points(D,recs_min,col=mincol,pch=pch)\n      legend('topleft',legend=c(\"Highest\",\"Lowest\",\"Mean\"),text.col=c(fcol,icol,\"black\"),text.font=2,bty=\"n\")\n\n      ylim<-c(-1,1)*max(abs(range(c(ld_max,ld_min))))\n      plot(c(0.5,ny),ylim,col='white',axes=F,xlab=\"\",ylab=\"\")\n      abline(h=0,lwd=2,col=mucol)\n      points(ld_max[yord]-muR_max,col=maxcol,pch=pch)\n      points(ld_min[yord]-muR_min,col=mincol,pch=pch)\n      axis(2)\n      axis(1,c(-100,100),c(-100,100))\n      mtext(\"Year\",1,line=2.1)\n      mtext(\"Recruitment deviation\",2,line=2)\n\n      d_max<-density(rnorm(10000,muR_max,sigR_max))\n      d_min<-density(rnorm(10000,muR_min,sigR_min))\n\n      scale<-max(d_min$y)\n\n      plot(c(0,1),ylim,axes=F,xlab=\"\",ylab=\"\",col=\"white\")\n\n      polygon(x=d_max$y/scale,y=d_max$x-muR_max,col=maxcol,border=maxcol)\n      polygon(x=d_min$y/scale,y=d_min$x-muR_min,col=mincol,border=mincol)\n      legend('topright',legend=c(sigR_max,sigR_min),text.font=2,text.col=c(fcol,icol),bty='n')\n\n    }else{\n      plot(c(0,3.5),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(1.75,0.5,\"< Unspecified >\",col=\"grey\")\n      #text(1.75,0.25,input$DM,col=\"grey\")\n      #text(1.75,0.75,DM_nams,col=\"grey\")\n    }\n\n  }\n\n  output$plotsigR <- renderPlot(plotsigR())\n\n  plotq <- function(dummy=1){\n\n    q_nams<-unlist(q_list)#c(\"q_d3_d2\",\"q_d2_d1\",\"q_d1_1\",\"q_1_2\",\"q_2_3\")\n    cond<-q_nams%in%input$q\n\n    if(sum(cond)>0){\n\n      ny<-75\n      maxcol<-fcol2\n      mincol<-icol\n      q_max<-max(q_maxes[cond])\n      q_min<-min(q_mins[cond])\n      qy_max<-(1+q_max/100)^(1:ny)\n      qy_min<-(1+q_min/100)^(1:ny)\n\n      par(mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n\n      plot(c(0.5,ny)+2018,c(0,2.5),col=\"white\",xlab=\"\",ylab=\"\")\n      polygon(2018+c(1:ny,ny:1),c(qy_max,qy_min[ny:1]),border=NA,col=fcol)\n      lines((1:ny)+2018,qy_max,col=maxcol)\n      lines((1:ny)+2018,qy_min,col=mincol)\n      hmin<-hmax<-0.5\n      if(q_max>0)hmax<-2\n      if(q_min>0)hmin<-2\n\n      abline(h=1)\n      abline(h=c(hmax,hmin),col=c(maxcol,mincol),lty=2)\n      vmax<-log(hmax,1+q_max/100)\n      vmin<-log(hmin,1+q_min/100)\n      abline(v=2018+c(vmax,vmin),col=c(maxcol,mincol),lty=2)\n\n      mtext(\"Year\",1,line=2)\n      mtext(\"Catchability relative to today (q)\",2,line=2)\n      text(vmax-10+2018,0.03,paste(round(vmax),\"years\"),col=maxcol)\n      text(vmin-10+2018,0.24,paste(round(vmin),\"years\"),col=mincol)\n      legend('topleft',legend=c(paste(\"Highest = \",q_max,\"%\"),paste(\"Lowest = \",q_min,\"%\")),text.col=c(maxcol,mincol),bty='n',text.font=1)\n\n\n    }else{\n      plot(c(0,3.5),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(1.75,0.5,\"< Unspecified >\",col=\"grey\")\n    }\n\n  }\n\n  output$plotq <- renderPlot(plotq())\n\n  fishgrid2<-function(nfish,fcol=\"red\",mpacol=\"green\"){\n\n    nfish2<-floor(nfish/5)\n    xlim<-c(0,1)\n    ylim<-c(0,1)\n    xl<-seq(xlim[1],xlim[2],length.out=6)[2:5]\n    yl<-seq(ylim[1],ylim[2],length.out=7)[2:6]\n    ind<-expand.grid(1:4,1:5)\n    cols<-rep(fcol,20)\n    cols[0:nfish2]<-mpacol\n\n    for(i in 1:20)fishy(xl[ind[i,1]],yl[ind[i,2]],scale=0.09,col=cols[i],border=cols[i])\n\n  }\n\n  plotA <- function(dummy=1){\n\n    A_nams<-unlist(A_list)#c(\"A_1\", \"A_1_5\", \"A_5_10\", \"A_10_20\", \"A_20_30\", \"A_30_40\", \"A_40_50\")\n    cond<-A_nams%in%input$A\n\n    if(sum(cond)>0){\n\n      Amax<-max(A_maxes[cond])*100\n      Amin<-min(A_mins[cond])*100\n\n      par(mfrow=c(1,2),mai=c(0.01,0.2,0.01,0.01), omi=c(0.4,0.01,0.55,0.01), cex.main = 1.5, cex.lab=1.35 )\n      plot(c(0,1),c(0,1),col=\"white\",axes=F)\n      fishgrid2(Amin,fcol=icol,mpacol=fcol)\n      mtext(\"Smallest\",3,line=0.4)\n      plot(c(0,1),c(0,1),col=\"white\",axes=F)\n      fishgrid2(Amax,fcol=icol,mpacol=fcol)\n      mtext(\"Largest\",3,line=0.4)\n\n\n    }else{\n\n      plot(c(0,3.5),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(1.75,0.5,\"< Unspecified >\",col=\"grey\")\n\n    }\n\n  }\n\n  output$plotA <- renderPlot(plotA())\n\n\n  fishgrid3<-function(Prob,fcol=\"red\",mpacol=\"green\"){\n\n    nfish<-floor(Prob*100)\n    xlim<-c(0,1)\n    ylim<-c(0,1)\n    xl<-seq(xlim[1],xlim[2],length.out=22)[2:21]\n    yl<-seq(ylim[1],ylim[2],length.out=22)[2:21]\n    ind<-expand.grid(1:20,1:20)\n    cols<-array(fcol,c(20,20))\n    cols[1:10,1:10]<-mpacol\n\n    indmpa<-as.matrix(expand.grid(1:10,1:10))\n    inds1<-indmpa[sample(1:100,nfish),]\n    cols[inds1]<-fcol\n\n    indf<-as.matrix(rbind(expand.grid(11:20,1:20),expand.grid(1:10,11:20)))\n    inds2<-indf[sample(1:300,nfish),]\n    cols[inds2]<-mpacol\n\n    indall<-as.matrix(expand.grid(1:20,1:20))\n\n    for(i in 1:400)fishy(xl[indall[i,1]],yl[indall[i,2]],scale=0.035,col=cols[indall[i,1],indall[i,2]],border=cols[indall[i,1],indall[i,2]])\n\n  }\n\n\n  plotV <- function(dummy=1){\n\n    V_nams<-unlist(V_list)#c(\"P_1\", \"P_1_5\", \"P_5_10\", \"P_10_20\", \"P_20\")\n    cond<-V_nams%in%input$V\n\n    if(sum(cond)>0){\n\n      Vmax<-max(V_maxes[cond])\n      Vmin<-min(V_mins[cond])\n\n      par(mfrow=c(1,2),mai=c(0.01,0.01,0.01,0.01), omi=c(0.01,0.01,0.5,0.01), cex.main = 1.5, cex.lab=1.35 )\n      plot(c(0,1),c(0,1),axes=F,col=\"white\")\n      text(0.25,0.25,\"MPA\",cex=2.7,font=2,col=\"grey78\")\n      fishgrid3(Vmin,fcol=icol,mpacol=fcol)\n      polygon(c(0.02,0.5,0.5,0.02),c(0.02,0.02,0.5,0.5),col=NA,border='black')\n      mtext(\"Lowest mixing\",3,line=0.4)\n      plot(c(0,1),c(0,1),axes=F,col=\"white\")\n      text(0.25,0.25,\"MPA\",cex=2.7,font=2,col=\"grey78\")\n      fishgrid3(Vmax,fcol=icol,mpacol=fcol)\n      mtext(\"Highest mixing\",3,line=0.4)\n      polygon(c(0.02,0.5,0.5,0.02),c(0.02,0.02,0.5,0.5),col=NA, border='black')\n\n\n\n    }else{\n\n      plot(c(0,3.5),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(1.75,0.5,\"< Unspecified >\",col=\"grey\")\n\n    }\n\n  }\n\n  output$plotV <- renderPlot(plotV())\n\n  plotIB <- function(dummy=1){\n    #IB_list<<-list(\"Large underages\" = \"IB_n30\", \"Underages\" = \"IB_n30_n10\",\"Slight underages\" = \"IB_n10_0\",\n    #               \"Taken exactly\"=\"IB_n5_5\",\"Slight overages\"=\"IB_0_10\",\"Overages\"=\"IB_10_30\",\"Large overages\"=\"IB_30\")\n\n    IB_nams<-unlist(IB_list)#c(\"IB_n30\", \"IB_n30_n10\",\"IB_n10_0\",\"IB_n5_5\",\"IB_0_10\",\"IB_10_30\",\"IB_30\")\n\n    cond<-IB_nams%in%input$IB\n\n    if(sum(cond)>0){\n\n      par(mfrow=c(1,2),mai=c(0.3,0.5,0.01,0.01), omi=c(0.4,0.4,0.55,0.1),cex.main = 1.5, cex.lab=1.35 )\n      IB_max<-max(IB_maxes[cond])\n      IB_min<-min(IB_mins[cond])\n\n      set.seed(1)\n\n      ts1<-c(1:20,c(41:50)/2,rep(25.5,10),(51:30)/2)\n      ny1<-length(ts1)\n      ts1<-ts1*exp(rnorm(ny1,0,0.2))\n      ts1<-ts1/mean(ts1)*8\n\n      ts2<-c(1:10,rep(10.5,25),(6:20)*2,seq(40,1,length.out=10))\n      ny2<-length(ts2)\n      ts2<-ts2*exp(rnorm(ny2,0,0.4))\n      ts2<-ts2/mean(ts2)\n\n      cols<-colsbox<-c(fcol,\"black\",icol)\n      colsbox[2]<-'white'\n\n      # plot TS2\n      yrs<-2017-(ny2:1)-1\n      ny<-length(yrs)\n      UB<- IB_max*ts2\n      LB<- IB_min*ts2\n      plot(yrs,ts2,col=\"white\",ylim=c(0,max(UB,ts2)),xlab=\"\",ylab=\"\",type='l')\n      if(IB_max<1){\n        polygon(c(yrs,yrs[ny:1]),c(LB,UB[ny:1]),border=NA,col=cols[3])\n      }else if(IB_min<1){\n        polygon(c(yrs,yrs[ny:1]),c(LB,ts2[ny:1]),border=NA,col=cols[3])\n      }\n      if(IB_min>1){\n        polygon(c(yrs,yrs[ny:1]),c(UB,LB[ny:1]),border=NA,col=cols[1])\n      }else if(IB_max>1){\n        polygon(c(yrs,yrs[ny:1]),c(UB,ts2[ny:1]),border=NA,col=cols[1])\n      }\n      lines(yrs,ts2,col=cols[2],lwd=1)\n      mtext(\"Example 1\",3,line=0.8)\n\n      legend('topleft',legend=c(\"Overages\",\"TAC\",\"Underages\"),\n             fill=colsbox,border='white',col=cols,lty=c(NA,1,NA),bty='n',cex=0.8)\n\n      # plot TS1\n      yrs<-2017-(ny1:1)-1\n      ny<-length(yrs)\n      UB<- IB_max*ts1\n      LB<- IB_min*ts1\n      plot(yrs,ts1,col=\"white\",ylim=c(0,max(UB,ts1)),xlab=\"\",ylab=\"\",type='l')\n      if(IB_max<1){\n        polygon(c(yrs,yrs[ny:1]),c(LB,UB[ny:1]),border=NA,col=cols[3])\n      }else if(IB_min<1){\n        polygon(c(yrs,yrs[ny:1]),c(LB,ts1[ny:1]),border=NA,col=cols[3])\n      }\n      if(IB_min>1){\n        polygon(c(yrs,yrs[ny:1]),c(UB,LB[ny:1]),border=NA,col=cols[1])\n      }else if(IB_max>1){\n        polygon(c(yrs,yrs[ny:1]),c(UB,ts1[ny:1]),border=NA,col=cols[1])\n      }\n      lines(yrs,ts1,col=cols[2],lwd=1)\n      mtext(\"Example 2\",3,line=0.8)\n      mtext(\"Year\",1,line=1,outer=T)\n      mtext(\"Catches (recommended / taken) (tonnes)\",2,line=0.7,outer=T)\n\n\n    }else{\n      par(mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n      plot(c(1,20),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(10,0.5,\"< unspecified >\", col=\"grey\")\n\n    }\n\n\n  }\n\n  output$plotIB <- renderPlot(plotIB())\n\n  plotIV <- function(){\n\n    IB_nams<-c(\"IB_n30\", \"IB_n30_n10\",\"IB_n10_0\",\"IB_n5_5\",\"IB_0_10\",\"IB_10_30\",\"IB_30\")\n\n    cond<-IB_nams%in%input$IB\n\n    IV_nams<-unlist(IV_list)#c(\"IV_1\",\"IV_1_5\",\"IV_5_10\",\"IV_10_20\",\"IV_20_40\")\n    cond2<-IV_nams%in%input$IV\n\n    if(sum(cond)>0){\n\n      if(sum(cond2)>0){\n\n        IB_max<-max(IB_maxes[cond])\n        IB_min<-min(IB_mins[cond])\n\n        set.seed(1)\n\n        # plot TS2\n        par(mai=c(0.4,0.65,0.01,0.01), omi=c(0.4,0.01,0.55,0.01), cex.main = 1.5, cex.lab=1.35 )\n        layout(matrix(c(1,2),nrow=1),widths=c(2,1))\n\n        pch=19\n        ny<-40\n        yrs<-2018+(1:ny)\n\n        maxcol<-icol\n        mincol<-fcol\n\n        gen_ts<-function(sig,ny=40)exp(rnorm(ny,-0.5*sig^2,sig))\n        sigI_max<-max(IV_maxes[cond2])\n        sigI_min<-min(IV_mins[cond2])\n\n        IU_max<-IB_max*gen_ts(sigI_max,ny)\n        IU_min<-IB_max*gen_ts(sigI_min,ny)\n        IL_max<-IB_min*gen_ts(sigI_max,ny)\n        IL_min<-IB_min*gen_ts(sigI_min,ny)\n        ylim=c(min(c(IU_max,IU_min,IL_max,IL_min))-0.5,quantile(c(IU_max,IU_min,IL_max,IL_min),0.97))\n\n        plot(yrs,rep(1,ny),col=\"black\",ylim=ylim,xlab=\"\",ylab=\"\",type='l',lwd=2)\n        #abline(h=0,col='light grey')\n        mtext(\"Year\",1,line=2.5)\n        mtext(\"Implemented / Recommended\",2,line=2.5)\n        lines(yrs,IU_max,col=maxcol)\n        lines(yrs,IU_min,col=mincol)\n        lines(yrs,IL_max,col=maxcol,lty=2)\n        lines(yrs,IL_min,col=mincol,lty=2)\n        legend('bottomleft',legend=c(\"Highest mean level\",\"Lowest mean level\"),lty=c(1,2),bty='n')\n        legend('bottomright',legend=c(\"Highest variance\",\"Lowest variance\"),text.col=c(maxcol,mincol),bty='n')\n\n        minadjust=0.5\n        maxadjust=0.5\n        dU_max<-density(IB_max*gen_ts(sigI_max,10000),adjust=maxadjust)\n        dU_min<-density(IB_max*gen_ts(sigI_min,10000),adjust=minadjust)\n        dL_max<-density(IB_min*gen_ts(sigI_max,10000),adjust=maxadjust)\n        dL_min<-density(IB_min*gen_ts(sigI_min,10000),adjust=minadjust)\n        scale<-max(dU_max$y, dU_min$y, dL_max$y, dL_min$y)\n\n        plot(c(0,2),ylim,axes=F,xlab=\"\",ylab=\"\",col=\"white\")\n        abline(h=1,lwd=2)\n        #abline(h=0,col='light grey')\n        powplot<-0.66\n        polygon(x=1+(dU_max$y/scale)^powplot,y=dU_max$x,col=maxcol,border=maxcol)\n        polygon(x=1+(dU_min$y/scale)^powplot,y=dU_min$x,col=mincol,border=mincol)\n\n        polygon(x=(dL_max$y/scale)^powplot,y=dL_max$x,col=maxcol,border=maxcol)\n        polygon(x=(dL_min$y/scale)^powplot,y=dL_min$x,col=mincol,border=mincol)\n\n        legend('bottomright',legend=paste(\"V =\",c(sigI_max,sigI_min)),text.font=2,text.col=c(maxcol,mincol),bty='n')\n\n      }else{\n\n        par(mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n        plot(c(1,20),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n        text(10,0.5,\"< unspecified >\", col=\"grey\")\n\n      }\n\n    }else{\n\n      par(mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n      plot(c(1,20),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(10,0.5,\"< Management Q2 is unspecified >\", col=\"grey\")\n\n    }\n\n  }\n\n  output$plotIV <- renderPlot(plotIV())\n\n  plotCB <- function(dummy=1){\n\n    CB_nams<-unlist(CB_list)#c(\"CB_n50_n30\", \"CB_n30_n10\",\"CB_n10_0\",\"CB_n5_5\",\"CB_0_10\")\n    cond<-CB_nams%in%input$CB\n\n    if(sum(cond)>0){\n\n      par(mfrow=c(1,2),mai=c(0.3,0.5,0.01,0.01), omi=c(0.4,0.4,0.55,0.1),cex.main = 1.5, cex.lab=1.35 )\n      Cbias_max<-max(CB_maxes[cond])\n      Cbias_min<-min(CB_mins[cond])\n\n      set.seed(2)\n\n      ts1<-c(1:20,c(41:50)/2,rep(25.5,30))\n      ny1<-length(ts1)\n      ts1<-ts1*exp(rnorm(ny1,0,0.2))\n      ts1<-ts1/mean(ts1)*8\n\n      ts2<-c(seq(1,10,length.out=5),seq(10,5,length.out=15),seq(5.5,10,length.out=5),rep(11,25))\n      ny2<-length(ts2)\n      ts2<-ts2*exp(rnorm(ny2,0,0.25))\n      ts2<-ts2/mean(ts2)\n\n      cols<-colsbox<-c(fcol,'black',icol)\n      colsbox[2]<-'white'\n\n      # plot TS2\n      yrs<-2017-(ny2:1)-1\n      ny<-length(yrs)\n      UB<- Cbias_max*ts2\n      LB<- Cbias_min*ts2\n      plot(yrs,ts2,col=\"white\",ylim=c(0,max(UB,ts2)),xlab=\"\",ylab=\"\",type='l')\n      if(Cbias_max<1){\n        polygon(c(yrs,yrs[ny:1]),c(LB,UB[ny:1]),border=NA,col=cols[3])\n      }else if(Cbias_min<1){\n        polygon(c(yrs,yrs[ny:1]),c(LB,ts2[ny:1]),border=NA,col=cols[3])\n      }\n      if(Cbias_min>1){\n        polygon(c(yrs,yrs[ny:1]),c(UB,LB[ny:1]),border=NA,col=cols[1])\n      }else if(Cbias_max>1){\n        polygon(c(yrs,yrs[ny:1]),c(UB,ts2[ny:1]),border=NA,col=cols[1])\n      }\n      lines(yrs,ts2,col=cols[2],lwd=1)\n      mtext(\"Example 1\",3,line=0.8)\n\n      legend('topleft',legend=c(\"Catches over-reported\",\"Catches taken\",\"Catches under-reported\"),\n             fill=colsbox,border='white',col=cols,lty=c(NA,1,NA),bty='n',cex=0.8)\n\n      # plot TS1\n      yrs<-2017-(ny1:1)-1\n      ny<-length(yrs)\n      UB<- Cbias_max*ts1\n      LB<- Cbias_min*ts1\n      plot(yrs,ts1,col=\"white\",ylim=c(0,max(UB,ts1)),xlab=\"\",ylab=\"\",type='l')\n      if(Cbias_max<1){\n        polygon(c(yrs,yrs[ny:1]),c(LB,UB[ny:1]),border=NA,col=cols[3])\n      }else if(Cbias_min<1){\n        polygon(c(yrs,yrs[ny:1]),c(LB,ts1[ny:1]),border=NA,col=cols[3])\n      }\n      if(Cbias_min>1){\n        polygon(c(yrs,yrs[ny:1]),c(UB,LB[ny:1]),border=NA,col=cols[1])\n      }else if(Cbias_max>1){\n        polygon(c(yrs,yrs[ny:1]),c(UB,ts1[ny:1]),border=NA,col=cols[1])\n      }\n      lines(yrs,ts1,col=cols[2],lwd=1)\n      mtext(\"Example 2\",3,line=0.8)\n      mtext(\"Year\",1,line=1,outer=T)\n      mtext(\"Catches (taken) (tonnes)\",2,line=0.7,outer=T)\n\n\n    }else{\n\n      par(mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n      plot(c(1,20),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(10,0.5,\"< unspecified >\", col=\"grey\")\n\n    }\n\n  }\n\n  output$plotCB <- renderPlot(plotCB())\n\n  plotBeta <- function(){\n\n    Beta_nams<-unlist(Beta_list)#list(\"Beta_200_300\", \"Beta_125_200\",\"Beta_80_125\", \"Beta_50_80\",\"Beta_33_50\")\n    cond<-Beta_nams%in%input$Beta\n\n    if(sum(cond)>0){\n\n      par(mfrow=c(1,2),mai=c(0.6,0.7,0.01,0.01), omi=c(0.4,0.4,0.55,0.1),cex.main = 1.5, cex.lab=1.35 )\n      Beta_max<-max(Beta_maxes[cond])\n      Beta_min<-min(Beta_mins[cond])\n\n      dep<-seq(0,1,length.out=100)\n      plot(c(0,1),c(0,1),type='l',lwd=2,xlab=\"\",ylab=\"\")\n      mtext(\"Real Stock Depletion (SSB relative to unfished)\",1,line=2.2,xlab=\"\",ylab=\"\")\n      mtext(\"Relative abundance index\",2,line=2.2)\n      mtext(\"Index relative to real depletion\",3,line=0.5)\n      Imax<-dep^Beta_max\n      Imin<-dep^Beta_min\n      lines(dep,Imax,col=icol)\n      lines(dep,Imin,col=fcol)\n\n      set.seed(2)\n\n      ts1<-seq(1,0.4,length.out=61)*(2+(cos((-0:60)/10.18))/3)*exp(rnorm(61,0,0.05))\n      ts1<-ts1/max(ts1)\n      tLB<-ts1^Beta_max\n      tUB<-ts1^Beta_min\n      ts1<-ts1/mean(ts1)\n      tLB<-tLB/mean(tLB)\n      tUB<-tUB/mean(tUB)\n      ny<-length(ts1)\n\n      yrs<-CurrentYr-(ny:1)\n      plot(yrs,ts1,lwd=2,type=\"l\",ylim=range(c(ts1,tLB,tUB)),xlab=\"\",ylab=\"\")\n      mtext(\"Year\",1,line=2.2)\n      mtext(\"Relative abundance\",2,line=2.2)\n      mtext(\"Example indices\",3,line=0.5)\n\n      lines(yrs,tLB,col=icol)\n      lines(yrs,tUB,col=fcol)\n\n      legend('topright',c(paste0(\"Beta = \",c(Beta_max,Beta_min)),\"True biomass\"),text.col=c(icol,fcol,\"black\"),text.font=c(1,1,2),bty='n')\n\n    }else{\n\n      par(mar=c(3,3,0.01,0.01), cex.main = 1.5, cex.lab=1.35 )\n      plot(c(1,20),c(0,1),col=\"white\",axes=FALSE,xlab=\"\",ylab=\"\")\n      text(10,0.5,\"< unspecified >\", col=\"grey\")\n\n    }\n\n  }\n\n  output$plotBeta <- renderPlot(plotBeta())\n\n\n  Pplot3<-function(MSEobj,maxcol=6,qcol=rgb(0.4,0.8,0.95), lcol= \"dodgerblue4\",curyr=2018,quants=c(0.1,0.9)){\n\n    if(is.na(maxcol))maxcol=ceiling(length(MSEobj@MPs)/0.5) # defaults to portrait 1:2\n    MPs<-MSEobj@MPs\n    nMPs<-length(MPs)\n    yrs<-curyr+(1:MSEobj@proyears)\n\n    plots<-split(1:nMPs, ceiling(seq_along(1:nMPs)/maxcol))\n\n    nr<-length(plots)*2\n    nc<-maxcol\n\n    mat<-array(0,c(nc,nr*1.5))\n    ind<-floor(0.5+(1:nr)*1.5)\n    mat[,ind]<-1:(nr*nc)\n    mat<-t(mat)\n    ht<-rep(0.2,nr*1.5)\n    ht[ind]<-1\n    layout(mat,heights=ht)\n    par(mai=c(0.3,0.3,0.01,0.01),omi=c(0.5,0.5,0.05,0.05))\n\n    B_BMSY<-MSEobj@B_BMSY\n    Yd<-MSEobj@C/ MSEobj@OM$RefY\n\n    Blims <- c(0,quantile(B_BMSY,0.95))\n    Ylims<- c(0,quantile(Yd,0.95))\n\n    plotquant<-function(x,p=c(0.1,0.9),yrs,qcol,lcol,addline=T){\n      ny<-length(yrs)\n      qs<-apply(x,2,quantile,p=p)\n      polygon(c(yrs,yrs[ny:1]),c(qs[1,],qs[2,ny:1]),border=NA,col=qcol)\n\n      if(addline)for(i in 1:2)lines(yrs,x[i,],col=lcol,lty=i)\n      lines(yrs,apply(x,2,quantile,p=0.5),lwd=2,col=\"white\")\n    }\n\n    for(pp in 1:length(plots)){\n\n      toplot<-unlist(plots[pp])\n      nt<-length(toplot)\n\n      for(i in toplot){\n        plot(range(yrs),Blims,col=\"white\")\n        plotquant(B_BMSY[,i,],p=quants,yrs,qcol,lcol)\n        mtext(MSEobj@MPs[i],3,line=0.2,font=2)\n        if(i==toplot[1])mtext(\"B/BMSY\",2,line=2.3)\n      }\n      if(nt<maxcol)for(i in 1:(maxcol-nt))plot(NULL, xlim=c(0,1), ylim=c(0,1), ylab=\"y label\", xlab=\"x lablel\",axes=F)\n\n      for(i in toplot){\n        plot(range(yrs),Ylims,col=\"white\")\n        plotquant(Yd[,i,],p=quants,yrs,qcol,lcol)\n        if(i==toplot[1])mtext(\"Rel. Yd.\",2,line=2.3)\n      }\n      if(nt<maxcol)for(i in 1:(maxcol-nt))plot(NULL, xlim=c(0,1), ylim=c(0,1), ylab=\"y label\", xlab=\"x lablel\",axes=F)\n\n    }\n\n    mtext(\"Projection Year\",1,line=0.7,outer=T)\n\n  }\n\n  # Ancillary indicators functions ================================\n\n  slp<-function(x,mat,ind){\n    y<-log(mat[x,ind])\n    if(sum(!is.na(y))<2){\n      return(NA)\n    }else{\n     return(lm(y~x1,data.frame(x1=1:length(ind),y=y))$coef[2])\n    }\n  }\n\n  slp2<-function(x,mat,ind){\n    x1<-1:length(ind)\n    y=log(mat[x,ind])\n    mux<-mean(x1)\n    muy<-mean(y)\n    SS<-sum((x1-mux)^2)\n    (1/SS)*sum((x1-mux)*(y-muy))\n   }\n\n  AAV<-function(x,mat,ind){\n    ni<-length(ind)\n    mean(abs((mat[x,ind[2:ni]]-mat[x,ind[1:(ni-1)]])/mat[x,ind[1:(ni-1)]]))\n  }\n\n  mu<-function(x,mat,ind){\n    log(mean(mat[x,ind]))\n  }\n\n  getinds<-function(PPD,styr,res, tsd= c(\"Cat\",\"Cat\",\"Cat\",\"Ind\",\"ML\"),stat=c(\"slp\",\"AAV\",\"mu\",\"slp\", \"slp\")){\n    nsim<-dim(PPD@Cat)[1]\n    proyears<-dim(PPD@Cat)[2]-styr+1\n\n    if(res>proyears)message(paste0(\"The temporal resolution for posterior predictive data calculation (\",res,\") is higher than the number of projected years (\",proyears,\"). Only one time step of indicators are calculated for \",proyears, \" projected years.\"))\n    np<-floor(proyears/res)\n\n    ntsd<-length(tsd)\n    inds<-array(NA,c(ntsd,np,nsim))\n\n    for(i in 1:ntsd){\n      for(pp in 1:np){\n        ind<-styr+((pp-1)*res)+1:res\n        inds[i,pp,]<-sapply(1:nsim,get(stat[i]),mat=slot(PPD,tsd[i]),ind=ind)\n      }\n    }\n    inds\n  }\n\n  CC<-function(indPPD,indData,pp=1,dnam=c(\"CS\",\"CV\",\"CM\",\"IS\",\"IM\",\"MLS\",\"MLM\"),res=6){\n\n    if(pp>1)namst<-paste(rep(dnam,pp),rep((1:pp)*res,each=length(dnam)))\n    if(pp==1)namst=dnam\n    cols<-c(\"#ff000050\",\"#0000ff50\")\n    ntsd<-dim(indPPD)[1]\n    ni<-pp*ntsd\n    ind2PPD<-matrix(indPPD[,1:pp,],nrow=ni)\n    ind2Data<-matrix(indData[,1:pp],nrow=ni)\n    par(mfrow=c(ni-1,ni-1),mai=rep(0,4),omi=c(0.5,0.75,0.4,0.05))\n\n    for(i in 2:ni){\n\n      for(j in 1:(ni-1)){\n\n        if(j==i|j>i){\n\n          plot(1,1,col='white',axes=F)\n\n\n        }else{\n\n          #coly=cols[ceiling(posmean(cor(mcmc@rawdat[1:maxn,keep1[i]],mcmc@rawdat[1:maxn,keep2[j]]))*ncols)]\n          xlim<-quantile(c(ind2PPD[j,],ind2Data[j,]),c(0.02,0.98))\n          ylim<-quantile(c(ind2PPD[i,],ind2Data[i,]),c(0.02,0.98))\n          plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=1.2,col=cols[1],axes=F)\n          axis(1,c(-10E10,10E10),c(-10E10,10E10))\n          axis(2,c(-10E10,10E10),c(-10E10,10E10))\n          axis(3,c(-10E10,10E10),c(-10E10,10E10))\n          axis(4,c(-10E10,10E10),c(-10E10,10E10))\n          points(ind2Data[j,],ind2Data[i,],pch=4,cex=2,col=cols[2],lwd=2)\n\n        }\n        if(i==2&j==(ni-1)){\n          legend('center',legend=c(\"Observed\",\"Simulated\"),text.col=c(\"blue\",\"red\"),bty='n',cex=1.4,text.font=2)\n\n        }\n\n        if(j==1)mtext(namst[i],2,line=2,cex=1,las=2)\n        if(i==ni)mtext(namst[j],1,line=1,cex=1,las=2)\n        #if(j==1)mtext(i,2,line=2,cex=0.5,las=2)\n        #if(i==nplotted)mtext(j,1,line=1,cex=0.5,las=2)\n\n      }\n\n    }\n    mtext(paste(\"Example AI Analysis for\",input$AI_MP),3,line=0.1,outer=T)\n\n  }\n\n  mahalanobis_robust<-function (x, center, cov, inverted = FALSE) {\n\n    x <- if (is.vector(x))\n      matrix(x, ncol = length(x))\n    else as.matrix(x)\n    if (!identical(center, FALSE))\n      x <- sweep(x, 2L, center)\n\n    invcov <- corpcor::pseudoinverse(cov)\n    setNames(rowSums(x %*% invcov * x), rownames(x))\n\n  }\n\n  getsegment<-function(densobj,thresh,lower=T){\n    if(lower){\n      cond<-densobj$x<thresh\n    }else{\n      cond<-densobj$x>thresh\n    }\n\n    xs<-c(0,densobj$y[cond],0)\n    ys<-densobj$x[cond]\n    ys<-c(ys[1],ys,ys[length(ys)])\n\n    list(x=xs,y=ys)\n  }\n\n  plot_mdist<-function(indPPD,indData){\n    nullcov<-cov(t(indPPD[,1,]))\n    nullm<-apply(indPPD[,1,],1,mean)\n    nullsims<-t(indPPD[,1,])\n    obs=indData[,1]\n\n    dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)\n    dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)\n\n    par(mai=c(1.5,1.5,1.2,0.05))\n    dens<-density(dists,from=0,to=quantile(dists,0.99))\n    plot(dens,xlab=\"\",main=\"\",col='blue',ylab=\"\")\n    thresh<-quantile(dists,0.95)\n    abline(v=thresh,lty=2,lwd=2)\n    text(thresh+1.2,max(dens$y)-0.02,\"V (alpha = 5%)\")\n    mtext(\"Mahanobis distance, D\",1,line=2)\n    mtext(\"Density\",2,line=2)\n    subdens<-getsegment(dens,thresh,lower=T)\n    polygon(y=subdens$x,x=subdens$y,col=\"blue\",border=NA)\n\n    leg<-\"Outlier detected (Obs > V)\"\n    lcol<-\"Red\"\n    if(dist<thresh){\n      leg<-\"Outlier not detected (Obs < V)\"\n      lcol=\"green\"\n    }\n    abline(v=dist,lwd=2,col=lcol)\n    text(dist+1.2,max(dens$y)-0.02,\"Observed M-distance\",col=lcol)\n    legend('top',legend=leg,text.col=lcol,bty='n')\n    mtext(paste(\"Example AI Analysis for\",input$AI_MP),3,line=0.1)\n  }\n\n\n\n\n\n})\n",
    "created" : 1523375929719.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2850928765",
    "id" : "1261D27D",
    "lastKnownWriteTime" : 1523381142,
    "last_content_update" : 1523381142904,
    "path" : "C:/GitHub/FRAME/inst/shiny_apps/FRAME/server.R",
    "project_path" : "inst/shiny_apps/FRAME/server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}