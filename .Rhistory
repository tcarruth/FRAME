VOIout<-VOI(MSEobj2,ncomp=17,nbins=6)[[1]]
CCU_plot(VOIout)
MSEobj2<-Sub(params$MSEobj,MPs=params$MSEobj@MPs[unlist(plots[i])])
VOIout<-VOI(MSEobj2,ncomp=17,nbins=6)[[1]]
CCU_plot(VOIout)
MSEobj2<-Sub(params$MSEobj,MPs=params$MSEobj@MPs[unlist(plots[i])])
VOIout<-VOI(MSEobj2,ncomp=17,nbins=6)[[1]]
CCU_plot(VOIout)
CCU_plot(VOIout)
runApp('inst/shiny_apps/EDS')
nMPs<-length(params$MSEobj@MPs)
panelsperplot<-6
nplots<-ceiling(nMPs/panelsperplot)
plots<-split(1:nMPs, ceiling(seq_along(1:nMPs)/panelsperplot))
plots
MSEobj2<-Sub(params$MSEobj,MPs=params$MSEobj@MPs[unlist(plots[i])])
VOIout<-VOI(MSEobj2,ncomp=17,nbins=6)[[1]]
VOIout
?VOI
VOI
nMPs<-length(params$MSEobj@MPs)
panelsperplot<-6
nplots<-ceiling(nMPs/panelsperplot)
plots<-split(1:nMPs, ceiling(seq_along(1:nMPs)/panelsperplot))
VOIout<-new('list')
for(i in 1:length(plots)){
VOIout[[i]]<-VOI(MSEobj2,ncomp=17,nbins=6)[[1]]
}
i<-1
CCU_plot(VOIout[[i]])
CCU_plot(VOIout[[i]])
VOIoutS<-VOIout
VOIout<-VOIout[[1]]
qno<-   c("F2",       "F3",             "F4",       "F6",         "F7",       "F8",          "F9",              "F10",      "F11",             "F12",        "F13",          "F14",
"M2",       "M3",  "D2",    "D3")
qtext<- c("Longevity","Stock depletion","Resilence","Exploit. Var.","Selectivity","Dome Sel.","Discard rate","Post. Rel. Mort.","Rec. Var.","Fish. efficiency","MPA size",   "Mixing",
"Imp. over/under",  "Imp. Var.", "Cat. Rep. Bias.","Hyperstability")
opt1<-  c("M",        "Depletion",      "hs",      "Esd",          "LFS",        "Vmaxlen",  "DR",          "PRM",             "procsd",   "qinc",            "Frac_area_1","Prob_staying",
"TACFrac", "TACSD","Cbias","betas")
opt2<-  c(rep("",12),"TAEFrac", "TAESD","","","RefY")
nMPs<-MSEobj@nMPs
ncol=3
nrow=ceiling(nMPs/ncol)
par(mfrow=c(nrow,ncol),mai=c(1.8,0.4,0.01,0.01),omi=c(0.3,0.3,0.05,0.01))
nrow
ncol
runApp('inst/shiny_apps/EDS')
?runMSE
runApp('inst/shiny_apps/EDS')
runApp('inst/shiny_apps/EDS')
avail('MPs')
avail('MP')
MPs<<-avail('MP')
!MPs%in%c("FMSYref","FMSYref75","FMSYref50","NFref")
MPs[!MPs%in%c("FMSYref","FMSYref75","FMSYref50","NFref")]
runApp('inst/shiny_apps/EDS')
runApp('inst/shiny_apps/EDS')
setup()
MSEobj<-runMSE(MPs=MPs,parallel=T,PPD=T)
mm<-1
PPD<-MSEobj@Misc[[mm]]
slp<-function(x,mat,ind){
lm(y~x1,data.frame(x1=1:length(ind),y=log(mat[x,ind])))$coef[2]
}
slp2<-function(x,mat,ind){
x1<-1:length(ind)
y=log(mat[x,ind])
mux<-mean(x1)
muy<-mean(y)
SS<-sum((x1-mux)^2)
(1/SS)*sum((x1-mux)*(y-muy))
}
AAV<-function(x,mat,ind){
ni<-length(ind)
mean(abs((mat[x,ind[2:ni]]-mat[x,ind[1:(ni-1)]])/mat[x,ind[1:(ni-1)]]))
}
mu<-function(x,mat,ind){
log(mean(mat[x,ind]))
}
getinds<-function(PPD,styr,res, tsd= c("Cat","Cat","Cat","Ind","ML"),stat=c("slp","AAV","mu","slp", "slp")){
nsim<-dim(PPD@Cat)[1]
proyears<-dim(PPD@Cat)[2]-styr+1
if(res>proyears)message(paste0("The temporal resolution for posterior predictive data calculation (",res,") is higher than the number of projected years (",proyears,"). Only one time step of indicators are calculated for ",proyears, " projected years."))
np<-floor(proyears/res)
ntsd<-length(tsd)
inds<-array(NA,c(ntsd,np,nsim))
for(i in 1:ntsd){
for(pp in 1:np){
ind<-styr+((pp-1)*res)+1:res
inds[i,pp,]<-sapply(1:nsim,get(stat[i]),mat=slot(PPD,tsd[i]),ind=ind)
}
}
inds
}
CC<-function(indPPD,indData,pp=1,dnam=c("CS","CV","CM","IS","IM","MLS","MLM"),res){
if(pp>1)namst<-paste(rep(dnam,pp),rep((1:pp)*res,each=length(dnam)))
if(pp==1)namst=dnam
cols<-c("#ff000050","#0000ff50")
ntsd<-dim(indPPD)[1]
ni<-pp*ntsd
ind2PPD<-matrix(indPPD[,1:pp,],nrow=ni)
ind2Data<-matrix(indData[,1:pp,],nrow=ni)
par(mfrow=c(ni-1,ni-1),mai=rep(0,4),omi=c(0.5,0.75,0,0.05))
for(i in 2:ni){
for(j in 1:(ni-1)){
if(j==i|j>i){
plot(1,1,col='white',axes=F)
}else{
#coly=cols[ceiling(posmean(cor(mcmc@rawdat[1:maxn,keep1[i]],mcmc@rawdat[1:maxn,keep2[j]]))*ncols)]
xlim<-quantile(c(ind2PPD[j,],ind2Data[j,]),c(0.02,0.98))
ylim<-quantile(c(ind2PPD[i,],ind2Data[i,]),c(0.02,0.98))
plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=0.8,col=cols[1],axes=F)
points(ind2Data[j,],ind2Data[i,],pch=19,cex=0.8,col=cols[2])
}
if(i==2&j==(ni-1)){
legend('center',legend=c("Null - stable M", "Alternative - inc M"),text.col=c("blue","red"),bty='n')
}
if(j==1)mtext(namst[i],2,line=2,cex=0.6,las=2)
if(i==ni)mtext(namst[j],1,line=1,cex=0.6,las=2)
#if(j==1)mtext(i,2,line=2,cex=0.5,las=2)
#if(i==nplotted)mtext(j,1,line=1,cex=0.5,las=2)
}
}
}
Probs<-function(indPPD,indData,alpha=0.05){
ntsd<-dim(indPPD)[1]
np<-dim(indPPD)[2]
nsim<-dim(indPPD)[3]
#PRB<-array(NA,c(4,np)) # False Positive, True Positive
PRB<-array(NA,c(2,np))  # False Positive, True Positive
mah<-array(NA,c(2,np,nsim))
for(pp in 1:np){
keep<-array(TRUE,c(ntsd,pp))
for(i in 1:ntsd){
for(j in 1:pp){
if(dip(indPPD[i,j,])>0.065)keep[i,j]=FALSE
}
}
ni<-sum(keep)
keepind<-as.matrix(expand.grid(1:ntsd,1:pp,1:nsim))[rep(as.vector(keep),nsim),]
ind3PPD<-t(matrix(indPPD[keepind],nrow=ni))
ind3Data<-t(matrix(indData[keepind],nrow=ni))
# NULL = TRUE  (true negatives, false negatives)
#covr <- cov.mcd(ind3PPD)
covr <- cov(ind3PPD)
#test<-svd(covr)
mu<-apply(ind3PPD,2,median)
#mahN <- mahalanobis(ind3PPD, center = covr$center, cov = covr$cov, tol = 1e-25)
#mahA <- mahalanobis(ind3Data, center = covr$center, cov = covr$cov, tol = 1e-25)
#mahN1 <- mahalanobis(ind3PPD, center = mu, cov = covr, tol = 1e-25)
#mahA1 <- mahalanobis(ind3Data, center = mu, cov = covr, tol = 1e-25)
mahN <- mahalanobis_robust(ind3PPD, center = mu, cov = covr)
mahA <- mahalanobis_robust(ind3Data, center = mu, cov = covr)
mahN<-extreme.outlier(mahN)
mahA<-extreme.outlier(mahA)
mah[1,pp,]<-mahN
mah[2,pp,]<-mahA
Thres<-quantile(mahN,1-alpha,na.rm=T)
#plot(density(mah[1,pp,],na.rm=T),type="l",col="blue")
#lines(density(mah[2,pp,],na.rm=T),col="red")
#abline(v=Thres)
PRB[1,pp]<-mean(mah[1,pp,]>Thres,na.rm=T)   # False positive
PRB[2,pp]<-mean(mah[2,pp,]>Thres,na.rm=T)   # True positive
}
return(list(mah=mah,PRB=PRB,keep=keep))
}
mm<-1
PPD<-MSEobj@Misc[[mm]]
?runMSE
-MSEobj@Misc
MSEobj@Misc[
]
library(DLMtool)
setup()
MSEobj<-runMSE(MPs=MPs,parallel=T,PPD=TRUE)
mm<-1
PPD<-MSEobj@Misc[[mm]]
MSEobj<-runMSE(MPs=MPs,parallel=F,PPD=TRUE)
mm<-1
PPD<-MSEobj@Misc[[mm]]
PPD
tsd= c("Cat","Cat","Cat","Ind","Ind","ML", "ML")
stat=c("slp","AAV","mu","slp","mu", "slp","mu")
indPPD<-getinds(PPD,styr=27,res=6,tsd=tsd,stat=stat)
indPPD
dim(indPPD)
indData<-indPPD[,,1]
pp=1
dnam=c("CS","CV","CM","IS","IM","MLS","MLM")
res=6
if(pp>1)namst<-paste(rep(dnam,pp),rep((1:pp)*res,each=length(dnam)))
if(pp==1)namst=dnam
cols<-c("#ff000050","#0000ff50")
ntsd<-dim(indPPD)[1]
ni<-pp*ntsd
ind2PPD<-matrix(indPPD[,1:pp,],nrow=ni)
ind2Data<-matrix(indData[,1:pp],nrow=ni)
ind2Data<-matrix(indData[,1:pp],nrow=ni)
ind2Data
i<-2
for(j in 1:(ni-1)){
if(j==i|j>i){
plot(1,1,col='white',axes=F)
}else{
#coly=cols[ceiling(posmean(cor(mcmc@rawdat[1:maxn,keep1[i]],mcmc@rawdat[1:maxn,keep2[j]]))*ncols)]
xlim<-quantile(c(ind2PPD[j,],ind2Data[j,]),c(0.02,0.98))
ylim<-quantile(c(ind2PPD[i,],ind2Data[i,]),c(0.02,0.98))
plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=0.8,col=cols[1],axes=F)
points(ind2Data[j,],ind2Data[i,],pch=19,cex=0.8,col=cols[2])
}
if(i==2&j==(ni-1)){
legend('center',legend=c("Simulated", "Observed"),text.col=c("blue","red"),bty='n')
}
if(j==1)mtext(namst[i],2,line=2,cex=0.6,las=2)
if(i==ni)mtext(namst[j],1,line=1,cex=0.6,las=2)
#if(j==1)mtext(i,2,line=2,cex=0.5,las=2)
#if(i==nplotted)mtext(j,1,line=1,cex=0.5,las=2)
}
par(mfrow=c(ni-1,ni-1),mai=rep(0,4),omi=c(0.5,0.75,0,0.05))
for(i in 2:ni){
for(j in 1:(ni-1)){
if(j==i|j>i){
plot(1,1,col='white',axes=F)
}else{
#coly=cols[ceiling(posmean(cor(mcmc@rawdat[1:maxn,keep1[i]],mcmc@rawdat[1:maxn,keep2[j]]))*ncols)]
xlim<-quantile(c(ind2PPD[j,],ind2Data[j,]),c(0.02,0.98))
ylim<-quantile(c(ind2PPD[i,],ind2Data[i,]),c(0.02,0.98))
plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=0.8,col=cols[1],axes=F)
points(ind2Data[j,],ind2Data[i,],pch=19,cex=0.8,col=cols[2])
}
if(i==2&j==(ni-1)){
legend('center',legend=c("Observed","Simulated"),text.col=c("blue","red"),bty='n')
}
if(j==1)mtext(namst[i],2,line=2,cex=0.6,las=2)
if(i==ni)mtext(namst[j],1,line=1,cex=0.6,las=2)
#if(j==1)mtext(i,2,line=2,cex=0.5,las=2)
#if(i==nplotted)mtext(j,1,line=1,cex=0.5,las=2)
}
}
plot(1:20,pch=1:20)
par(mfrow=c(ni-1,ni-1),mai=rep(0,4),omi=c(0.5,0.75,0,0.05))
for(i in 2:ni){
for(j in 1:(ni-1)){
if(j==i|j>i){
plot(1,1,col='white',axes=F)
}else{
#coly=cols[ceiling(posmean(cor(mcmc@rawdat[1:maxn,keep1[i]],mcmc@rawdat[1:maxn,keep2[j]]))*ncols)]
xlim<-quantile(c(ind2PPD[j,],ind2Data[j,]),c(0.02,0.98))
ylim<-quantile(c(ind2PPD[i,],ind2Data[i,]),c(0.02,0.98))
plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=0.8,col=cols[1],axes=F)
points(ind2Data[j,],ind2Data[i,],pch=4,cex=1.2,col=cols[2])
}
if(i==2&j==(ni-1)){
legend('center',legend=c("Observed","Simulated"),text.col=c("blue","red"),bty='n')
}
if(j==1)mtext(namst[i],2,line=2,cex=0.6,las=2)
if(i==ni)mtext(namst[j],1,line=1,cex=0.6,las=2)
#if(j==1)mtext(i,2,line=2,cex=0.5,las=2)
#if(i==nplotted)mtext(j,1,line=1,cex=0.5,las=2)
}
}
par(mfrow=c(ni-1,ni-1),mai=rep(0,4),omi=c(0.5,0.75,0,0.05))
for(i in 2:ni){
for(j in 1:(ni-1)){
if(j==i|j>i){
plot(1,1,col='white',axes=F)
}else{
#coly=cols[ceiling(posmean(cor(mcmc@rawdat[1:maxn,keep1[i]],mcmc@rawdat[1:maxn,keep2[j]]))*ncols)]
xlim<-quantile(c(ind2PPD[j,],ind2Data[j,]),c(0.02,0.98))
ylim<-quantile(c(ind2PPD[i,],ind2Data[i,]),c(0.02,0.98))
plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=0.8,col=cols[1],axes=F)
points(ind2Data[j,],ind2Data[i,],pch=4,cex=1.6,col=cols[2],lwd=2)
}
if(i==2&j==(ni-1)){
legend('center',legend=c("Observed","Simulated"),text.col=c("blue","red"),bty='n')
}
if(j==1)mtext(namst[i],2,line=2,cex=0.6,las=2)
if(i==ni)mtext(namst[j],1,line=1,cex=0.6,las=2)
#if(j==1)mtext(i,2,line=2,cex=0.5,las=2)
#if(i==nplotted)mtext(j,1,line=1,cex=0.5,las=2)
}
}
ntsd<-dim(indPPD)[1]
np<-dim(indPPD)[2]
nsim<-dim(indPPD)[3]
#PRB<-array(NA,c(4,np)) # False Positive, True Positive
PRB<-array(NA,c(2,np))  # False Positive, True Positive
mah<-array(NA,c(2,np,nsim))
np
np<-dim(indData)[2]
np
dim(indData)
indData
indData<-indPPD[,1,1]
indData
indData<-matrix(indPPD[,1,1],ncol=1)
indData
ntsd<-dim(indPPD)[1]
np<-dim(indData)[2]
nsim<-dim(indPPD)[3]
#PRB<-array(NA,c(4,np)) # False Positive, True Positive
PRB<-array(NA,c(2,np))  # False Positive, True Positive
mah<-array(NA,c(2,np,nsim))
pp<-1
keep<-array(TRUE,c(ntsd,pp))
for(i in 1:ntsd){
for(j in 1:pp){
if(dip(indPPD[i,j,])>0.065)keep[i,j]=FALSE
}
}
ni<-sum(keep)
keepind<-as.matrix(expand.grid(1:ntsd,1:pp,1:nsim))[rep(as.vector(keep),nsim),]
keepind
ind2PPD
dim(ind2PPD)
?cov
cov(ind2PPD)
cov(t(ind2PPD))
nullcov<-cov(t(ind2PPD))
nullm<-apply(ind2PPD,1,mean)
fore<-ind2Data[,1]
fore
nullcov<-cov(t(ind2PPD))
nullm<-apply(ind2PPD,1,mean)
fore<-ind2Data[,1]
dists<-mahalanobis_robust(x=fore, center=nullm, covr=nullcov)
library(corpcor)
nullcov<-cov(t(ind2PPD))
nullm<-apply(ind2PPD,1,mean)
fore<-ind2Data[,1]
dists<-mahalanobis_robust(x=fore, center=nullm, covr=nullcov)
library(diptest)
nullcov<-cov(t(ind2PPD))
nullm<-apply(ind2PPD,1,mean)
fore<-ind2Data[,1]
dists<-mahalanobis_robust(x=fore, center=nullm, covr=nullcov)
library(mvtnorm)
nullcov<-cov(t(ind2PPD))
nullm<-apply(ind2PPD,1,mean)
fore<-ind2Data[,1]
dists<-mahalanobis_robust(x=fore, center=nullm, covr=nullcov)
mahalanobis_robust<-function (x, center, cov, inverted = FALSE) {
x <- if (is.vector(x))
matrix(x, ncol = length(x))
else as.matrix(x)
if (!identical(center, FALSE))
x <- sweep(x, 2L, center)
invcov <- pseudoinverse(cov)
setNames(rowSums(x %*% invcov * x), rownames(x))
}
indPPD<-getinds(PPD,styr=27,res=6,tsd=tsd,stat=stat)
indData<-matrix(indPPD[,1,1],ncol=1)
res<-6
indPPD<-getinds(PPD,styr=27,res=res,tsd=tsd,stat=stat)
indData<-matrix(indPPD[,1,1],ncol=1)
CC(indPPD,indData,pp=1,res=res)
indPPD[,1:pp,]
indData[,1:pp]
CC<-function(indPPD,indData,pp=1,dnam=c("CS","CV","CM","IS","IM","MLS","MLM"),res=6){
if(pp>1)namst<-paste(rep(dnam,pp),rep((1:pp)*res,each=length(dnam)))
if(pp==1)namst=dnam
cols<-c("#ff000050","#0000ff50")
ntsd<-dim(indPPD)[1]
ni<-pp*ntsd
ind2PPD<-matrix(indPPD[,1:pp,],nrow=ni)
ind2Data<-matrix(indData[,1:pp],nrow=ni)
par(mfrow=c(ni-1,ni-1),mai=rep(0,4),omi=c(0.5,0.75,0,0.05))
for(i in 2:ni){
for(j in 1:(ni-1)){
if(j==i|j>i){
plot(1,1,col='white',axes=F)
}else{
#coly=cols[ceiling(posmean(cor(mcmc@rawdat[1:maxn,keep1[i]],mcmc@rawdat[1:maxn,keep2[j]]))*ncols)]
xlim<-quantile(c(ind2PPD[j,],ind2Data[j,]),c(0.02,0.98))
ylim<-quantile(c(ind2PPD[i,],ind2Data[i,]),c(0.02,0.98))
plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=0.8,col=cols[1],axes=F)
points(ind2Data[j,],ind2Data[i,],pch=4,cex=1.6,col=cols[2],lwd=2)
}
if(i==2&j==(ni-1)){
legend('center',legend=c("Observed","Simulated"),text.col=c("blue","red"),bty='n')
}
if(j==1)mtext(namst[i],2,line=2,cex=0.6,las=2)
if(i==ni)mtext(namst[j],1,line=1,cex=0.6,las=2)
#if(j==1)mtext(i,2,line=2,cex=0.5,las=2)
#if(i==nplotted)mtext(j,1,line=1,cex=0.5,las=2)
}
}
}
res<-6
indPPD<-getinds(PPD,styr=27,res=res,tsd=tsd,stat=stat)
indData<-matrix(indPPD[,1,1],ncol=1)
CC(indPPD,indData,pp=1,res=res)
nullcov<-cov(t(indPPD))
nullm<-apply(indPPD,1,mean)
fore=indData[,1]
dim(indPPD)
nullcov<-cov(t(indPPD[,1,]))
nullm<-apply(indPPD,1,mean)
fore=indData[,1]
dists<-mahalanobis_robust(x=fore, center=nullm, covr=nullcov)
nullcov<-cov(t(indPPD[,1,]))
nullm<-apply(indPPD,1,mean)
fore=indData[,1]
dists<-mahalanobis_robust(x=fore, center=nullm, cov=nullcov)
dists
nullcov<-cov(t(indPPD[,1,]))
nullm<-apply(indPPD[,1,],1,mean)
nullsims<-indPPD[,1,]
obs=indData[,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
nullsims<-t(indPPD[,1,])
obs=indData[,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
dists
dist
dens<-density(dists,from=0,to=quantile(dists,0.99))
plot(dens,xlab="",main="",col='blue',ylab="")
dens<-density(dists,from=0,to=quantile(dists,0.99))
plot(dens,xlab="",main="",col='blue',ylab="")
thresh<-quantile(dists,0.95)
abline(v=thresh,lty=2,lwd=2)
text(thresh+1.2,max(dens$y)-0.02,"V (alpha = 5%)")
mtext("Distance, D",1,line=2)
mtext("Density",2,line=2)
subdens<-getsegment(dens,thresh,lower=T)
getsegment<-function(densobj,thresh,lower=T){
if(lower){
cond<-densobj$x<thresh
}else{
cond<-densobj$x>thresh
}
xs<-c(0,densobj$y[cond],0)
ys<-densobj$x[cond]
ys<-c(ys[1],ys,ys[length(ys)])
list(x=xs,y=ys)
}
subdens<-getsegment(dens,thresh,lower=T)
polygon(y=subdens$x,x=subdens$y,col="blue",border=NA)
text(dist+1.2,max(dens$y)-0.02,"Observed M-distance")
nullcov<-cov(t(indPPD[,1,]))
nullm<-apply(indPPD[,1,],1,mean)
nullsims<-t(indPPD[,1,])
obs=indData[,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
dens<-density(dists,from=0,to=quantile(dists,0.99))
plot(dens,xlab="",main="",col='blue',ylab="")
thresh<-quantile(dists,0.95)
abline(v=thresh,lty=2,lwd=2)
text(thresh+1.2,max(dens$y)-0.02,"V (alpha = 5%)")
mtext("Distance, D",1,line=2)
mtext("Density",2,line=2)
subdens<-getsegment(dens,thresh,lower=T)
polygon(y=subdens$x,x=subdens$y,col="blue",border=NA)
abline(v=dist,lwd=2,col='red')
text(dist+1.2,max(dens$y)-0.02,"Observed M-distance",col='red')
nullcov<-cov(t(indPPD[,1,]))
nullm<-apply(indPPD[,1,],1,mean)
nullsims<-t(indPPD[,1,])
obs=indData[,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
dens<-density(dists,from=0,to=quantile(dists,0.99))
plot(dens,xlab="",main="",col='blue',ylab="")
thresh<-quantile(dists,0.95)
abline(v=thresh,lty=2,lwd=2)
text(thresh+1.2,max(dens$y)-0.02,"V (alpha = 5%)")
mtext("Distance, D",1,line=2)
mtext("Density",2,line=2)
subdens<-getsegment(dens,thresh,lower=T)
polygon(y=subdens$x,x=subdens$y,col="blue",border=NA)
leg<-"Outlier detected (Obs > V)"
lcol<-"Red"
if(dist<thresh){
leg<-"Outlier not detected (Obs < V)"
lcol="green"
}
abline(v=dist,lwd=2,col=lcol)
text(dist+1.2,max(dens$y)-0.02,"Observed M-distance",col=lcol)
legend('top',legend=leg,text.col=lcol,bty='n')
runApp('inst/shiny_apps/EDS')
runApp('inst/shiny_apps/EDS')
runApp('inst/shiny_apps/EDS')
getwd()
setwd("C:/Github/EDS/inst/shiny_apps/EDS")
load("MSEobj")
mm<-1
PPD<-MSEobj@Misc[[mm]]
tsd= c("Cat","Cat","Cat","Ind","Ind","ML", "ML")
stat=c("slp","AAV","mu","slp","mu", "slp","mu")
res<-6
indPPD<-getinds(PPD,styr=27,res=res,tsd=tsd,stat=stat)
indData<-matrix(indPPD[,1,1],ncol=1)
PPD
names(MSEobj@Misc)
MSEobj@Misc[[1]]
?lm
testOM@R0
runApp('C:/GitHub/EDS/inst/shiny_apps/EDS')
runApp('C:/GitHub/EDS/inst/shiny_apps/EDS')
runApp('C:/GitHub/EDS/inst/shiny_apps/EDS')
runApp('C:/GitHub/EDS/inst/shiny_apps/EDS')
runApp('C:/GitHub/EDS/inst/shiny_apps/EDS')
runApp('C:/GitHub/EDS/inst/shiny_apps/EDS')
runApp('C:/GitHub/EDS/inst/shiny_apps/EDS')
runApp('C:/GitHub/EDS/inst/shiny_apps/EDS')
runApp('C:/GitHub/EDS/inst/shiny_apps/EDS')
runApp('C:/GitHub/EDS/inst/shiny_apps/EDS')
runApp('C:/GitHub/EDS/inst/shiny_apps/EDS')
shiny::runApp('inst/shiny_apps/FRAME')
