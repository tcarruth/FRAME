Biomass[SAYR] <- N[SAYR] * Wt_age[SAY]  # Calculate initial stock biomass
SSB[SAYR] <- SSN[SAYR] * Wt_age[SAY]    # Calculate spawning stock biomass
VBiomass[SAYR] <- Biomass[SAYR] * V[SAY]  # Calculate vunerable biomass
# --- Historical Spatial closures ----
MPA <- matrix(1, nyears+proyears, ncol=nareas)
if (all(!is.na(OM@MPA)) && sum(OM@MPA) != 0) { # historical spatial closures have been specified
yrindex <- OM@MPA[,1]
if (max(yrindex)>nyears) stop("Invalid year index for spatial closures: must be <= nyears")
if (min(yrindex)<1) stop("Invalid year index for spatial closures: must be > 1")
if (ncol(OM@MPA)-1 != nareas) stop("OM@MPA must be nareas + 1")
for (xx in seq_along(yrindex)) {
MPA[yrindex[xx]:nrow(MPA),] <- matrix(OM@MPA[xx, 2:ncol(OM@MPA)], nrow=length(yrindex[xx]:nrow(MPA)),ncol=nareas, byrow = TRUE)
}
}
# --- Optimize catchability (q) to fit depletion ----
if(!silent) message("Optimizing for user-specified depletion")  # Print a progress update
bounds <- c(0.0001, 15) # q bounds for optimizer
qs <- sapply(1:nsim, getq3, D, SSB0, nareas, maxage, N, pyears=nyears,
M_ageArray, Mat_age, Asize, Wt_age, V, retA, Perr_y, mov, SRrel, Find,
Spat_targ, hs, R0a, SSBpR, aR, bR, bounds=bounds, MPA=MPA, maxF=maxF) # find the q that gives current stock depletion
# --- Check that q optimizer has converged ----
LimBound <- c(1.1, 0.9)*range(bounds)  # bounds for q (catchability). Flag if bounded optimizer hits the bounds
probQ <- which(qs > max(LimBound) | qs < min(LimBound))
Nprob <- length(probQ)
# If q has hit bound, re-sample depletion and try again. Tries 'ntrials' times and then alerts user
if (length(probQ) > 0) {
Err <- TRUE
if(!silent) message(Nprob,' simulations have final biomass that is not close to sampled depletion')
if(!silent) message('Re-sampling depletion, recruitment error, and fishing effort')
count <- 0
OM2 <- OM
while (Err & count < ntrials) {
# Re-sample Stock Parameters
Nprob <- length(probQ)
OM2@nsim <- Nprob
SampCpars2 <- list()
if (length(OM2@cpars)>0) SampCpars2 <- SampleCpars(OM2@cpars, OM2@nsim, msg=FALSE)
ResampStockPars <- SampleStockPars(OM2, cpars=SampCpars2, Msg=FALSE)
ResampStockPars$CAL_bins <- StockPars$CAL_bins
ResampStockPars$CAL_binsmid <- StockPars$CAL_binsmid
# Re-sample depletion
D[probQ] <- ResampStockPars$D
# Re-sample recruitment deviations
procsd[probQ] <- ResampStockPars$procsd
AC[probQ] <- ResampStockPars$AC
Perr_y[probQ,] <- ResampStockPars$Perr_y
hs[probQ] <- ResampStockPars$hs
# Re-sample historical fishing effort
ResampFleetPars <- SampleFleetPars(SubOM(OM2, "Fleet"), Stock=ResampStockPars,
OM2@nsim, nyears, proyears, cpars=SampCpars2)
Esd[probQ] <- ResampFleetPars$Esd
Find[probQ, ] <- ResampFleetPars$Find
dFfinal[probQ] <- ResampFleetPars$dFfinal
# Optimize for q
qs[probQ] <- sapply(probQ, getq3, D, SSB0, nareas, maxage, N, pyears=nyears,
M_ageArray, Mat_age, Asize, Wt_age, V, retA, Perr_y, mov, SRrel, Find,
Spat_targ, hs, R0a, SSBpR, aR, bR, bounds=bounds, MPA=MPA, maxF=maxF)
probQ <- which(qs > max(LimBound) | qs < min(LimBound))
count <- count + 1
if (length(probQ) == 0) Err <- FALSE
}
if (Err) { # still a problem
tooLow <- length(which(qs > max(LimBound)))
tooHigh <- length(which(qs < min(LimBound)))
prErr <- length(probQ)/nsim
if (prErr > fracD & length(probQ) >= 1) {
if (length(tooLow) > 0) message(tooLow, " sims can't get down to the lower bound on depletion")
if (length(tooHigh) > 0) message(tooHigh, " sims can't get to the upper bound on depletion")
if(!silent) message("More than ", fracD*100, "% of simulations can't get to the specified level of depletion with these Operating Model parameters")
stop("Change OM@seed and try again for a complete new sample, modify the input parameters, or increase ntrials")
} else {
if (length(tooLow) > 0) message(tooLow, " sims can't get down to the lower bound on depletion")
if (length(tooHigh) > 0) message(tooHigh, " sims can't get to the upper bound on depletion")
if(!silent) message("More than ", 100-fracD*100, "% simulations can get to the sampled depletion.\nContinuing")
}
}
}
shiny::runApp('inst/shiny_apps/FRAME')
runMSE(testOM,MPs=c("DCAC","DBSRA"))
?runMSE
library(FRAME)
library(DLMtool)
out<-runMSE(testOM,MPs=c("DCAC","DBSRA"))
shiny::runApp('inst/shiny_apps/FRAME')
shiny::runApp('inst/shiny_apps/FRAME')
myOM<-testOM
myOM@proyears<-2
myMSE<-runMSE(testOM,MP="curE",PPD=T)
PPD<-myMSE@Misc[[1]]
PPD
dim(PPD@CAL)
class(PPD)
Data<-myMSE@Misc[[1]]
class(Data)
CAA<-Data@CAA[simno,,]
Chist<-Data@Cat[simno,]
Ind<-Data@Ind[simno,]
CAL=NA
mulen<-Data@ML[simno,]
simno=1
CAA<-Data@CAA[simno,,]
Chist<-Data@Cat[simno,]
Ind<-Data@Ind[simno,]
CAL=NA
mulen<-Data@ML[simno,]
OM<-StochasticSRA(OM,CAA,Chist,Ind,ML,CAL,mulen,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=4000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
Data@CAL_bins
CAA<-Data@CAA[simno,,]
Chist<-Data@Cat[simno,]
Ind<-Data@Ind[simno,]
CAL=NA
ML<-Data@ML[simno,]
mulen<-NA
OM<-StochasticSRA(OM,CAA,Chist,Ind,ML,CAL,mulen,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=4000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
OM<-testOM
OM@proyears<-2
myMSE<-runMSE(OM,MP="curE",PPD=T)
Data<-myMSE@Misc[[1]]
OM
OM2<-StochasticSRA(OM,CAA,Chist,Ind,ML,CAL,mulen,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=4000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
OM<-testOM
OM@proyears<-2
myMSE<-runMSE(OM,MP="curE",PPD=T)
Data<-myMSE@Misc[[1]]
CAA<-Data@CAA[simno,,]
Chist<-Data@Cat[simno,]
Ind<-Data@Ind[simno,]
CAL=NA
ML<-Data@ML[simno,]
mulen<-NA
OM2<-StochasticSRA(OM,CAA,Chist,Ind,ML,CAL,mulen,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=4000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
OM<-testOM
OM@proyears<-2
myMSE<-runMSE(OM,MP="curE",PPD=T)
OM<-testOM
OM@proyears<-5
myMSE<-runMSE(OM,MP="curE",PPD=T)
Data<-myMSE@Misc[[1]]
CAA<-Data@CAA[simno,,]
Chist<-Data@Cat[simno,]
Ind<-Data@Ind[simno,]
CAL=NA
ML<-Data@ML[simno,]
mulen<-NA
Chist
OM2<-StochasticSRA(OM,CAA,Chist,Ind,ML,CAL,mulen,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=4000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
?DataInit
plot(OM2)
OM@Name
runApp('inst/shiny_apps/FRAME')
OM<-testOM
OM@proyears<-5
OM@M<-c(0.2,0.4)
myMSE<-runMSE(OM,MP="curE",PPD=T)
Data<-myMSE@Misc[[1]]
CAA<-Data@CAA[simno,,]
Chist<-Data@Cat[simno,]
Ind<-Data@Ind[simno,]
CAL=NA
ML<-Data@ML[simno,]
mulen<-NA
OM2<-StochasticSRA(OM,CAA,Chist,Ind,ML,CAL,mulen,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=F,nplot=6,SRAdir=NA)
OM2<-StochasticSRA(OM,CAA,Chist,Ind,ML,CAL,mulen,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
out<-SRAsim(OM)
?SRAsim
set.seed(1)
out<-SRAsim(OM,qmult=1)
names(out)
fit<-StochasticSRA(OM,CAA=out$CAA,Chist=out$Chist,Ind=out$ind,ML=out$ML,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
fit<-StochasticSRA(OM,CAA=out$CAA,Chist=out$Chist,Ind=out$Ind,ML=out$ML,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
?StochasticSRA
?SRAcomp
set.seed(1)
sim<-SRAsim(OM,qmult=1)
sam<-StochasticSRA(OM,CAA=sim$CAA,Chist=sim$Chist,Ind=sim$Ind,ML=sim$ML,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
SRAcomp(sim,sam)
set.seed(2)
sim<-SRAsim(OM,qmult=1)
sam<-StochasticSRA(OM,CAA=sim$CAA,Chist=sim$Chist,Ind=sim$Ind,ML=sim$ML,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
SRAcomp(sim,sam)
dim(sim$CAA)
CAA<-sim$CAA
CAA[1:48,]<-NA
sam<-StochasticSRA(OM,CAA=CAA,Chist=sim$Chist,Ind=sim$Ind,ML=sim$ML,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
OM@Vmaxlen
OM<-testOM
OM@proyears<-5
OM@M<-c(0.2,0.4)
OM@Vmaxlen<-c(1,1)
set.seed(2)
sim<-SRAsim(OM,qmult=1)
sam<-StochasticSRA(OM,CAA=sim$CAA,Chist=sim$Chist,Ind=sim$Ind,ML=sim$ML,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
SRAcomp(sim,sam)
# Only last 2 years of catch compositions
CAA2<-sim$CAA
CAA2[1:48,]<-NA
sam2<-StochasticSRA(OM,CAA=CAA2,Chist=sim$Chist,Ind=sim$Ind,ML=sim$ML,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
SRAcomp(sim,sam2)
Ind5<-sim$Ind
Ind5[1:45,]<-NA
sam3<-StochasticSRA(OM,CAA=CAA2,Chist=sim$Chist,Ind=Ind5,ML=sim$ML,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
Ind5<-sim$Ind
Ind5[1:45]<-NA
sam3<-StochasticSRA(OM,CAA=CAA2,Chist=sim$Chist,Ind=Ind5,ML=sim$ML,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
SRAcomp(sim,sam3)
sam4<-StochasticSRA(OM,CAA=CAA2,Chist=sim$Chist,Ind=Ind5,ML=NA,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
SRAcomp(sim,sam4)
OM<-testOM
OM@M<-c(0.2,0.2)
OM@Vmaxlen<-c(1,1)
set.seed(2)
sim<-SRAsim(OM,qmult=1)
sam1<-StochasticSRA(OM,CAA=sim$CAA,Chist=sim$Chist,Ind=sim$Ind,ML=sim$ML,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
OM<-testOM
OM@M<-c(0.2,0.2)
OM@Vmaxlen<-c(1,1)
set.seed(2)
sim<-SRAsim(OM,qmult=1.25)
sam1<-StochasticSRA(OM,CAA=sim$CAA,Chist=sim$Chist,Ind=sim$Ind,ML=sim$ML,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
SRAcomp(sim,sam1)
CAA2<-sim$CAA
CAA2[1:48,]<-NA
sam2<-StochasticSRA(OM,CAA=CAA2,Chist=sim$Chist,Ind=sim$Ind,ML=sim$ML,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
SRAcomp(sim,sam2)
Ind5<-sim$Ind
Ind5[1:45]<-NA
sam3<-StochasticSRA(OM,CAA=CAA2,Chist=sim$Chist,Ind=Ind5,ML=sim$ML,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
SRAcomp(sim,sam3)
SRAcomp(sim,sam1)
SRAcomp(sim,sam2)
SRAcomp(sim,sam3)
sam4<-StochasticSRA(OM,CAA=CAA2,Chist=sim$Chist,Ind=Ind5,ML=NA,CAL=NA,mulen=NA,wts=c(1,1,0.5,0.1,1),
Jump_fac=1,nits=1000, burnin=500,thin=10,ESS=300,MLsd=0.1,
ploty=T,nplot=6,SRAdir=NA)
SRAcomp(sim,sam4)
SRAcomp(sim,sam1)
SRAcomp(sim,sam2)
SRAcomp(sim,sam3)
SRAcomp(sim,sam4)
runApp('inst/shiny_apps/FRAME')
OM<-testOM
OM@proyears<-5
OM@M<-c(0.2,0.4)
myMSE<-runMSE(OM,MP="curE",PPD=T)
Data<-myMSE@Misc[[1]]
saveRDS(Data,"C:/temp/Data.rda")
runApp('inst/shiny_apps/FRAME')
runApp('inst/shiny_apps/FRAME')
runApp('inst/shiny_apps/FRAME')
OM<-testOM
OM@nyears<-68
OM@proyears<-2
OM@M<-c(0.2,0.4)
myMSE<-runMSE(OM,MP="curE",PPD=T)
Data<-myMSE@Misc[[1]]
saveRDS(Data,"C:/temp/Data.rda")
runApp('inst/shiny_apps/FRAME')
OM<-testOM
OM@nyears<-68
OM@proyears<-2
OM@M<-c(0.2,0.4)
myMSE<-runMSE(OM,MP="curE",PPD=T)
Data<-myMSE@Misc[[1]]
OM<-testOM
OM@nyears<-68
OM@proyears<-4
OM@M<-c(0.2,0.4)
myMSE<-runMSE(OM,MP="curE",PPD=T)
Data<-myMSE@Misc[[1]]
saveRDS(Data,"C:/temp/Data.rda")
ncol(Data@Cat)
runApp('inst/shiny_apps/FRAME')
nits<-1000
nits<-1400
nits/20
floor((1:20)*(nits/20)
)
nits<-1333
floor((1:20)*(nits/20))
runApp('inst/shiny_apps/FRAME')
dim(myMSE@SSB_hist)
matplot(apply(myMSE@SSB_hist,c(1,3),sum)
)
matplot(apply(myMSE@SSB_hist,c(1,3),sum)
)
matplot(t(apply(myMSE@SSB_hist,c(1,3),sum)),type='l')
myMSE<-runMSE(param$OM,Hist=T)
SSB<-apply(myMSE@SSB_hist,c(1,3),sum)
matplot(t(SSB),type='l',xlab="Historical Year",ylab="SSB")
D<-SSB/SSB[,1]
matplot(t(D),type='l',xlab="Historical Year",ylab="Stock depletion")
DFO_hist(OM)
DFO_quant(myMSE)
myMSE@FM
dim(myMSE@FM)
slotNames(myMSE)
dim(myMSE@FM_hist)
FM<-myMSE@FM_hist[,,1,1]
matplot(t(FM),type='l')
FM<-myMSE@FM_hist[,,1,1]
sel<-FM/apply(FM,1,max)
matplot(t(sel),type='l',xlab="Age",ylab="Selectivity")
runApp('inst/shiny_apps/FRAME')
SSB<-apply(myMSE@SSB_hist,c(1,3),sum)
SSB
params <- list(test = input$Name,
set_title=paste0("Operating Model Conditioning Report for ",input$Name),
set_type=paste0("Demonstration Condinging analysis"," (FRAME version ",FRAMEversion,")"),
PanelState=MSClog[[1]],
Just=MSClog[[2]],
Des=MSClog[[3]],
OM=OM,
ntop=input$ntop,
inputnames=inputnames,
SessionID=SessionID,
copyright="copyright (c) NRDC 2018"
)
params<-list(OM=OM)
myMSE<-runMSE(params$OM,Hist=T)
SSB<-apply(myMSE@SSB_hist,c(1,3),sum)
myMSE
names(myMSE)
names(myMSE$TSdata)
dim(myMSE$TSdata$SSB)
names(myMSE$AtAge)
myMSE$AtAge$Sl_age
dim(myMSE$AtAge$Sl_age)
SSB<-myMSE$TSdata$SSB
matplot(t(SSB),type='l',xlab="Historical Year",ylab="SSB")
matplot(SSB,type='l',xlab="Historical Year",ylab="SSB")
D<-SSB/SSB[,1]
matplot(t(D),type='l',xlab="Historical Year",ylab="Stock depletion")
myMSE<-runMSE(params$OM,Hist=T)
SSB<-t(myMSE$TSdata$SSB)
matplot(t(SSB),type='l',xlab="Historical Year",ylab="SSB")
D<-SSB/SSB[,1]
matplot(t(D),type='l',xlab="Historical Year",ylab="Stock depletion")
dim(myMSE$AtAge$Sl_age)
sel<-myMSE$AtAge$Sl_age[1]
matplot(t(sel),type='l',xlab="Age",ylab="Selectivity")
sel
sel<-myMSE$AtAge$Sl_age[,,1]
matplot(t(sel),type='l',xlab="Age",ylab="Selectivity")
runApp('inst/shiny_apps/FRAME')
library(FRAME)
shiny(FRAME)
Shiny(FRAME)
library(FRAME)
Shiny(FRAME)
runApp()
library(FRAME)
Shiny(FRAME)     # launch app
library(FRAME)
Shiny(FRAME)     # launch app
shiny::runApp('inst/shiny_apps/FRAME')
library(FRAME)
Shiny(FRAME)
install.packages('DLMtool')
install.packages("DLMtool")
?XL2Data
library(DLMtool)
?XL2Data
shiny::runApp('inst/shiny_apps/FRAME')
runApp('inst/shiny_apps/FRAME')
daty<-XL2Data("C:/temp/Example_data.csv")
daty
daty@Cat
runApp('inst/shiny_apps/FRAME')
library(shiny)
incProgress
runApp('inst/shiny_apps/FRAME')
library(FRAME)
Shiny(FRAME)
?LH2OM
install.packages("rfishbase")
library(DLMtool)
myOM <- LH2OM(testOM, dist='norm')
testOM@Linf<-c(1,1)
testOM@M<-c(0.2,0.3)
testOM@L50<-NA
testOM@K<-NA
library(DLMtool)
myOM <- LH2OM(testOM, dist='norm')
testOM@Linf<-c(1,1)
testOM@M<-c(0.2,0.3)
testOM@L50<-NaN
testOM@K<-NaN
myOM <- LH2OM(testOM, dist='norm')
myOM <- LH2OM(testOM, dist='norm',Family="thunnus")
testOM@Linf<-c(1,1)
testOM@M<-c(0.2,0.3)
testOM@L50<-NaN
testOM@K<-NaN
myOM <- LH2OM(testOM, dist='norm',Family="thunnus")
testOM@Linf<-c(1,1)
testOM@M<-c(0.2,0.3)
testOM@L50<-NaN
testOM@K<-NaN
myOM <- LH2OM(testOM, dist='norm',Family="kasuwonus")
myOM@cpars
if(is.na(maxage)){
OM@maxage=ceiling(-log(0.02)/min(OM@M))
}else{
OM@maxage=maxage
}
runApp()
install.packages('MSEtool')
class('HCR40_10')
library(MSEtool)
class(HCR40_10())
class(HCR40_10
)
avail('HCR')
class('SCA')
class(SCA)
avail('Assess')
library(FRAME)
Shiny(FRAME)
getwd()
OM<-readRDS(OM.rds)
OM<-readRDS('OM.rds')
OM<-readRDS('OM_autosave.rda')
OM@L50
OM@Linf
runApp()
OM<-readRDS('OM_autosave.rda')
OM@Linf
OM@L50
OM@K
OM<-LowSlopes(testOM)
OM@R0<-100000
OM@nsim<-nsim
OM@Linf<-c(100,100)
OM@L50<-NaN
OM@L50_95<-c(10,10)
OM@K<-NaN
OM@isRel<-"FALSE"
OM@nyears<-68
OM@M<-c(0.1,0.2)
OM@Species<-"Katsuwonus pelamis"
OM<-LH2OM(OM, dist='norm')
OM@M
OM@cpars
OM@K<-quantile(OM$cpars$K,c(0.05,0.95))
OM@K<-quantile(OM@cpars$K,c(0.05,0.95))
OM@K
OM@Linf
runApp()
OM<-LowSlopes(testOM)
OM@R0<-100000
OM@nsim<-nsim
OM@Linf<-c(100,100)
OM@L50<-NaN
OM@K<-NaN
OM@isRel<-"FALSE"
OM@Species<-"Katsuwonus pelamis"
OM@M
OM@M<-c(0.1,0.2)
OM<-LH2OM(OM, dist='norm')
OM<-readRDS("OM_autosave.rda")
MSEobj<<-runMSE(OM,silent=T,control=list(progress=T),PPD=T)
OM@L50
OM@Linf
OM@L50_95
OM@M
OM@cpars$M
runApp()
runApp()
runApp()
runApp()
