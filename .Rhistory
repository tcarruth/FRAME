Esdif<-E[mp]
if(E[ny]>E[mp]){
Efdif<-max(E[(mp+1):ny])-E[mp]
}else{
Efdif<-E[mp]-min(E[(mp+1):ny])
}
if(start_mag>1){
ET[(mp+1):ny]<-(E[(mp+1):ny]-E[mp])*(2-start_mag)+E[mp]
}else{
ET[1:mp]<-E[1:mp]*start_mag
ET[(mp+1):ny]<-E[(mp+1):ny]-E[mp]+E[mp]*start_mag
}
x1<-1:mp
x3<-(mp+1):ny
if(loc<1){
newmp<-ceiling(mp*loc)
}else{
newmp<-floor(mp+(ny-mp)*(loc-1))
}
if(newmp>1 & newmp<ny){
x2<-1:newmp
ET[x2]<-warp(newmp,E[x1],plot=plot)
x4<-(newmp+1):ny
ET[x4]<-warp(ny-newmp,E[x3],plot=plot)
}
ET<-ET/mean(ET)
if(plot){
plot(E,ylim=c(0,max(E)*1.05),type="l")
lines(ET,col='red')
}
if(plot){
plot(E,ylim=c(0,max(E)*1.05),type="l")
lines(ET,col='red')
}
plot(E,ylim=c(0,max(E)*1.05),type="l")
ET
M1=0.4; M2=1.2; sd1=0.1; sd2=0.3; h2=1; ny=68; loc=1; start_mag=0.5; plot=T
E<-rep(NA,ny)
ind1<-1:floor(M1*ny)
d1<-dnorm(ind1,M1*ny,sd1*ny)
E[ind1]<-d1/max(d1)
ind12<-(floor(M1*ny)+1):ceiling(M2*ny)
ind12<-ind12[ind12<=ny]
E[ind12]<-1
d2<-dnorm(ind12,M2*ny,sd2*ny)
E[ind12]<-E[ind12]+(d2/max(d2))*h2
ind2<-(ceiling(M2*ny)+1):ny
if(ind2[1]<ind2[2]){
E[ind2]<-dnorm(ind2,M2*ny,sd2*ny)
E[ind2]<-E[ind2]/max(E[ind2])*max(E[ind12])
}
E<-E/mean(E)
ET<-E
# Stretching and transformations (y)
dEdy<-(E[2:ny]/E[1:(ny-1)]-1)^2
mp<-match(min(dEdy),dEdy)
if(start_mag>1){
ET[(mp+1):ny]<-(E[(mp+1):ny]-E[mp])*(2-start_mag)+E[mp]
}else{
ET[1:mp]<-E[1:mp]*start_mag
ET[(mp+1):ny]<-E[(mp+1):ny]-E[mp]+E[mp]*start_mag
}
x1<-1:mp
x3<-(mp+1):ny
if(loc<1){
newmp<-ceiling(mp*loc)
}else{
newmp<-floor(mp+(ny-mp)*(loc-1))
}
ET2<-ET
if(newmp>1 & newmp<ny){
x2<-1:newmp
ET2[x2]<-warp(newmp,ET[x1],plot=plot)
x4<-(newmp+1):ny
ET2[x4]<-warp(ny-newmp,ET[x3],plot=plot)
}
ET2<-ET2/mean(ET2)
if(plot){
plot(E,ylim=c(0,max(E)*1.05),type="l")
lines(ET,col='red')
lines(ET2,col='blue')
}
M1=0.4; M2=1.2; sd1=0.1; sd2=0.3; h2=1; ny=68; loc=1; start_mag=0.5; plot=T
E<-rep(NA,ny)
ind1<-1:floor(M1*ny)
d1<-dnorm(ind1,M1*ny,sd1*ny)
E[ind1]<-d1/max(d1)
ind12<-(floor(M1*ny)+1):ceiling(M2*ny)
ind12<-ind12[ind12<=ny]
E[ind12]<-1
d2<-dnorm(ind12,M2*ny,sd2*ny)
E[ind12]<-E[ind12]+(d2/max(d2))*h2
ind2<-(ceiling(M2*ny)+1):ny
if(ind2[1]<ind2[2]){
E[ind2]<-dnorm(ind2,M2*ny,sd2*ny)
E[ind2]<-E[ind2]/max(E[ind2])*max(E[ind12])
}
E<-E/mean(E)
ET<-E
# Stretching and transformations (y)
dEdy<-(E[2:ny]/E[1:(ny-1)]-1)^2
mp<-match(min(dEdy),dEdy)
if(start_mag>1){
ET[(mp+1):ny]<-(E[(mp+1):ny]-E[mp])*(2-start_mag)+E[mp]
}else{
ET[1:mp]<-E[1:mp]*start_mag
ET[(mp+1):ny]<-E[(mp+1):ny]-E[mp]+E[mp]*start_mag
}
ET<-ET/mean(ET)
x1<-1:mp
x3<-(mp+1):ny
if(loc<1){
newmp<-ceiling(mp*loc)
}else{
newmp<-floor(mp+(ny-mp)*(loc-1))
}
ET2<-ET
if(newmp>1 & newmp<ny){
x2<-1:newmp
ET2[x2]<-warp(newmp,ET[x1],plot=plot)
x4<-(newmp+1):ny
ET2[x4]<-warp(ny-newmp,ET[x3],plot=plot)
}
ET2<-ET2/mean(ET2)
if(plot){
plot(E,ylim=c(0,max(E)*1.05),type="l")
lines(ET,col='red')
lines(ET2,col='blue')
}
ET2
M1=0.4; M2=1.2; sd1=0.1; sd2=0.3; h2=1; ny=68; loc=0.5; start_mag=0.5; plot=T
E<-rep(NA,ny)
ind1<-1:floor(M1*ny)
d1<-dnorm(ind1,M1*ny,sd1*ny)
E[ind1]<-d1/max(d1)
ind12<-(floor(M1*ny)+1):ceiling(M2*ny)
ind12<-ind12[ind12<=ny]
E[ind12]<-1
d2<-dnorm(ind12,M2*ny,sd2*ny)
E[ind12]<-E[ind12]+(d2/max(d2))*h2
ind2<-(ceiling(M2*ny)+1):ny
if(ind2[1]<ind2[2]){
E[ind2]<-dnorm(ind2,M2*ny,sd2*ny)
E[ind2]<-E[ind2]/max(E[ind2])*max(E[ind12])
}
E<-E/mean(E)
ET<-E
# Stretching and transformations (y)
dEdy<-(E[2:ny]/E[1:(ny-1)]-1)^2
mp<-match(min(dEdy),dEdy)
if(start_mag>1){
ET[(mp+1):ny]<-(E[(mp+1):ny]-E[mp])*(2-start_mag)+E[mp]
}else{
ET[1:mp]<-E[1:mp]*start_mag
ET[(mp+1):ny]<-E[(mp+1):ny]-E[mp]+E[mp]*start_mag
}
ET<-ET/mean(ET)
x1<-1:mp
x3<-(mp+1):ny
if(loc<1){
newmp<-ceiling(mp*loc)
}else{
newmp<-floor(mp+(ny-mp)*(loc-1))
}
ET2<-ET
if(newmp>1 & newmp<ny){
x2<-1:newmp
ET2[x2]<-warp(newmp,ET[x1],plot=plot)
x4<-(newmp+1):ny
ET2[x4]<-warp(ny-newmp,ET[x3],plot=plot)
}
ET2<-ET2/mean(ET2)
if(plot){
plot(E,ylim=c(0,max(E)*1.05),type="l")
lines(ET,col='red')
lines(ET2,col='blue')
}
M1=0.4; M2=1.2; sd1=0.1; sd2=0.3; h2=1; ny=68; loc=0.5; start_mag=1.9; plot=T
E<-rep(NA,ny)
ind1<-1:floor(M1*ny)
d1<-dnorm(ind1,M1*ny,sd1*ny)
E[ind1]<-d1/max(d1)
ind12<-(floor(M1*ny)+1):ceiling(M2*ny)
ind12<-ind12[ind12<=ny]
E[ind12]<-1
d2<-dnorm(ind12,M2*ny,sd2*ny)
E[ind12]<-E[ind12]+(d2/max(d2))*h2
ind2<-(ceiling(M2*ny)+1):ny
if(ind2[1]<ind2[2]){
E[ind2]<-dnorm(ind2,M2*ny,sd2*ny)
E[ind2]<-E[ind2]/max(E[ind2])*max(E[ind12])
}
E<-E/mean(E)
ET<-E
# Stretching and transformations (y)
dEdy<-(E[2:ny]/E[1:(ny-1)]-1)^2
mp<-match(min(dEdy),dEdy)
if(start_mag>1){
ET[(mp+1):ny]<-(E[(mp+1):ny]-E[mp])*(2-start_mag)+E[mp]
}else{
ET[1:mp]<-E[1:mp]*start_mag
ET[(mp+1):ny]<-E[(mp+1):ny]-E[mp]+E[mp]*start_mag
}
ET<-ET/mean(ET)
x1<-1:mp
x3<-(mp+1):ny
if(loc<1){
newmp<-ceiling(mp*loc)
}else{
newmp<-floor(mp+(ny-mp)*(loc-1))
}
ET2<-ET
if(newmp>1 & newmp<ny){
x2<-1:newmp
ET2[x2]<-warp(newmp,ET[x1],plot=plot)
x4<-(newmp+1):ny
ET2[x4]<-warp(ny-newmp,ET[x3],plot=plot)
}
ET2<-ET2/mean(ET2)
if(plot){
plot(E,ylim=c(0,max(E)*1.05),type="l")
lines(ET,col='red')
lines(ET2,col='blue')
}
trends[!cond,]<-NA
runApp('inst/shiny_apps/FRAME')
M1=0.4; M2=1.2; sd1=0.1; sd2=0.3; h2=1; ny=68; loc=1; start_mag=0.2; plot=T
E<-rep(NA,ny)
ind1<-1:floor(M1*ny)
d1<-dnorm(ind1,M1*ny,sd1*ny)
E[ind1]<-d1/max(d1)
ind12<-(floor(M1*ny)+1):ceiling(M2*ny)
ind12<-ind12[ind12<=ny]
E[ind12]<-1
d2<-dnorm(ind12,M2*ny,sd2*ny)
E[ind12]<-E[ind12]+(d2/max(d2))*h2
ind2<-(ceiling(M2*ny)+1):ny
if(ind2[1]<ind2[2]){
E[ind2]<-dnorm(ind2,M2*ny,sd2*ny)
E[ind2]<-E[ind2]/max(E[ind2])*max(E[ind12])
}
E<-E/mean(E)
ET<-E
# Stretching and transformations (y)
dEdy<-(E[2:ny]/E[1:(ny-1)]-1)^2
mp<-match(min(dEdy),dEdy)
start_mag
ET[1:mp]<-E[1:mp]*start_mag
E[(mp+1):ny]-E[mp]
runApp('inst/shiny_apps/FRAME')
log(0.1)
exp(0.1)
source('C:/GitHub/FRAME/inst/shiny_apps/FRAME/Fishery_figs.R', echo=TRUE)
runApp('inst/shiny_apps/FRAME')
M1=0.2; M2=0.7; sd1=0.1; sd2=0.18; h2=0; ny=68; loc=1; start_mag=0.2; plot=T
E<-rep(NA,ny)
ind1<-1:floor(M1*ny)
d1<-dnorm(ind1,M1*ny,sd1*ny)
E[ind1]<-d1/max(d1)
ind12<-(floor(M1*ny)+1):ceiling(M2*ny)
ind12<-ind12[ind12<=ny]
E[ind12]<-1
d2<-dnorm(ind12,M2*ny,sd2*ny)
E[ind12]<-E[ind12]+(d2/max(d2))*h2
ind2<-(ceiling(M2*ny)+1):ny
if(ind2[1]<ind2[2]){
E[ind2]<-dnorm(ind2,M2*ny,sd2*ny)
E[ind2]<-E[ind2]/max(E[ind2])*max(E[ind12])
}
E<-E/mean(E)
ET<-E
# Stretching and transformations (y)
dEdy<-(E[2:ny]/E[1:(ny-1)]-1)^2
mp<-match(min(dEdy),dEdy)
find<-(mp+1):ny
start_mag
ET[1:mp]<-E[1:mp]*start_mag
cond<-E[find]>E[mp]
cond
ET[find[cond]]<-E[find[cond]]-E[mp]+(E[mp]*start_mag)
frac<-E[find[!cond]]/(E[mp]+E[find[!cond]])
frac
logitf<-log(frac/(1-frac))
logitf
start_mag
newlogit<-logitf*(1/start_mag)
newlogit
exp(newlogit)/(1+exp(newlogit))
dEdy<-(E[2:ny]/E[1:(ny-1)]-1)^2
mp<-match(min(dEdy),dEdy)
find<-(mp+1):ny
if(start_mag>1){
ET[find]<-(E[find]-E[mp])*(2-start_mag)+E[mp]
}else{ # end magnitude larger
ET[1:mp]<-E[1:mp]*start_mag
cond<-E[find]>E[mp]
ET[find[cond]]<-E[find[cond]]-E[mp]+(E[mp]*start_mag)
frac<-E[find[!cond]]/(E[mp]+E[find[!cond]])
logitf<-log(frac/(1-frac))
newlogit<-logitf*(1/start_mag)
ET[find[!cond]]<-E[find[!cond]]*start_mag*2*exp(newlogit)/(1+exp(newlogit))
}
ET<-ET/mean(ET)
x1<-1:mp
x3<-(mp+1):ny
if(loc<1){
newmp<-ceiling(mp*loc)
}else{
newmp<-floor(mp+(ny-mp)*(loc-1))
}
ET2<-ET
if(newmp>1 & newmp<ny){
x2<-1:newmp
ET2[x2]<-warp(newmp,ET[x1],plot=plot)
x4<-(newmp+1):ny
ET2[x4]<-warp(ny-newmp,ET[x3],plot=plot)
}
ET2<-ET2/mean(ET2)
if(plot){
plot(E,ylim=c(0,max(E)*1.05),type="l")
lines(ET,col='red')
lines(ET2,col='blue')
}
runApp('inst/shiny_apps/FRAME')
runApp('inst/shiny_apps/FRAME')
Slider_list<<-list("loc"=1,"stmag"=1)
Slider_names<-names(Slider_list)
Slider_names
Fpanel_names<-c("M_list","D_list","h_list","FP_list","F_list","sel_list","dome_list","DR_list","PRM_list","sigR_list","q_list","A_list","V_list")
Mpanel_names<-c("M1_list","IB_list","IV_list")
Dpanel_names<-c("D1_list","CB_list","Beta_list","Err_list")
Slider_names<-names(Slider_list)
MasterList<<-list(Fpanel_names,Mpanel_names,Dpanel_names,Slider_names)
makeState<-function(x)rep(T,length(get(x)))
PanelState<<-list(Fpanel=lapply(Fpanel_names, makeState),
Mpanel=lapply(Mpanel_names, makeState),
Dpanel=lapply(Dpanel_names, makeState),
Slider=lapply(Slider_names,makeState))
Fpanel_names<-c("M_list","D_list","h_list","FP_list","F_list","sel_list","dome_list","DR_list","PRM_list","sigR_list","q_list","A_list","V_list")
Mpanel_names<-c("M1_list","IB_list","IV_list")
Dpanel_names<-c("D1_list","CB_list","Beta_list","Err_list")
Slider_names<-c("Slider_list")
Slider_list<<-list("loc"=1,"stmag"=1)
Slider_names<-c("Slider_list")
MasterList<<-list(Fpanel_names,Mpanel_names,Dpanel_names,Slider_names)
PanelState<<-list(Fpanel=lapply(Fpanel_names, makeState),
Mpanel=lapply(Mpanel_names, makeState),
Dpanel=lapply(Dpanel_names, makeState),
Slider=lapply(Slider_names,makeState))
PanelState
PanelState[[3]][[4]]<<-c(F,F,F,T) # Exception is the final selection of the data menu - quality is a radio button default to data-poor
getinputnames<-function(x)strsplit(x,"_")[[1]][1]
PanelState<<-list(Fpanel=lapply(Fpanel_names, makeState),
Mpanel=lapply(Mpanel_names, makeState),
Dpanel=lapply(Dpanel_names, makeState),
Slider=lapply(Slider_names,makeState))
PanelState[[3]][[4]]<<-c(F,F,F,T) # Exception is the final selection of the data menu - quality is a radio button default to data-poor
MasterList<<-list(Fpanel_names,Mpanel_names,Dpanel_names,Slider_names)
PanelState<<-list(Fpanel=lapply(Fpanel_names, makeState),
Mpanel=lapply(Mpanel_names, makeState),
Dpanel=lapply(Dpanel_names, makeState),
Slider=lapply(Slider_names,makeState))
PanelState
PanelState[[3]][[4]]<<-c(F,F,F,T) # Exception is the final selection of the data menu - quality is a radio button default to data-poor
PanelState
PanelState<-list(Fpanel=lapply(Fpanel_names, makeState),
Mpanel=lapply(Mpanel_names, makeState),
Dpanel=lapply(Dpanel_names, makeState),
Slider=lapply(Slider_names,makeState))
PanelState[[3]][[4]]<<-c(F,F,F,T) # Exception is the final selection of the data menu - quality is a radio button default to data-poor
PanelState
PanelState[[3]][[4]]
PanelState[[3]][[4]]<<-c(F,F,F,T) # Exception is the final selection of the data menu - quality is a radio button default to data-poor
PanelState[[3]][[4]]
PanelState[[3]][[4]]<-c(F,F,F,T) # Exception is the final selection of the data menu - quality is a radio button default to data-poor
getinputnames<-function(x)strsplit(x,"_")[[1]][1]
inputnames<<-list(Fpanel=lapply(Fpanel_names,getinputnames),
Mpanel=lapply(Mpanel_names,getinputnames),
Dpanel=lapply(Dpanel_names,getinputnames),
Slider=names(Slider_list))
inputnames
inputnames<<-list(Fpanel=lapply(Fpanel_names,getinputnames),
Mpanel=lapply(Mpanel_names,getinputnames),
Dpanel=lapply(Dpanel_names,getinputnames),
Slider=lapply(Slider_names,getinputnames))
inputnames
Slider=lapply(Slider_list,getinputnames)
lapply(Slider_list,function(x)name(x))
list(names(Slider_list))
inputnames
inputnames<<-list(Fpanel=lapply(Fpanel_names,getinputnames),
Mpanel=lapply(Mpanel_names,getinputnames),
Dpanel=lapply(Dpanel_names,getinputnames),
Slider=list(names(Slider_list)))
inputnames
as.list(names(Slider_list))
inputnames<<-list(Fpanel=lapply(Fpanel_names,getinputnames),
Mpanel=lapply(Mpanel_names,getinputnames),
Dpanel=lapply(Dpanel_names,getinputnames),
Slider=as.list(names(Slider_list)))
inputnames
inputtabs<-as.vector(unlist(inputnames))
as.vector(unlist(inputnames))
runApp('inst/shiny_apps/FRAME')
?updateSliderInput
runApp('inst/shiny_apps/FRAME')
getwd()
MSClog<-readRDS(file="C:/Users/tcar_/Downloads/eg_Atlantic_swo (7).frame")
MSClog[[1]][[4]]
MSClog[[1]][[3]]
MasterList
inputnames[[4]]
inputnames
runApp('inst/shiny_apps/FRAME')
MSClog<-readRDS(file="C:/Users/tcar_/Downloads/eg_Atlantic_swo (8).frame")
MSClog[[1]]
length(PanelState[[4]])
PanelState[[4]]
Dpanel_names
Slider_names
PanelState
Slider_names
as.list(Slider_names)
Slider_names
Dpanel_names
Slider_names<-c("Slider_list1","Slider_list2")
PanelState<-list(Fpanel=lapply(Fpanel_names, makeState),
Mpanel=lapply(Mpanel_names, makeState),
Dpanel=lapply(Dpanel_names, makeState),
Slider=as.list(Slider_names))
PanelState
PanelState[[3]][[4]]<-c(F,F,F,T) # Exception is the final selection of the data menu - quality is a radio button default to data-poor
Slider_list
names(Slider_list)
inputnames<<-list(Fpanel=lapply(Fpanel_names,getinputnames),
Mpanel=lapply(Mpanel_names,getinputnames),
Dpanel=lapply(Dpanel_names,getinputnames),
Slider=lapply(Slider_names,getinputnames))
inputnames
Slider_names
loc<<-list("loc"=1)
stmag<<-list("stmag"=1)
Slider_names<-c("loc","stmag")
MasterList<<-list(Fpanel_names,Mpanel_names,Dpanel_names,Slider_names)
PanelState<-list(Fpanel=lapply(Fpanel_names, makeState),
Mpanel=lapply(Mpanel_names, makeState),
Dpanel=lapply(Dpanel_names, makeState),
Slider=as.list(Slider_names))
Slider_names
MasterList
PanelState<-list(Fpanel=lapply(Fpanel_names, makeState),
Mpanel=lapply(Mpanel_names, makeState),
Dpanel=lapply(Dpanel_names, makeState),
Slider=as.list(Slider_names))
PanelState
loc<<-list(1)
stmag<<-list(1)
Slider_names<-c("loc","stmag")
MasterList<<-list(Fpanel_names,Mpanel_names,Dpanel_names,Slider_names)
PanelState<-list(Fpanel=lapply(Fpanel_names, makeState),
Mpanel=lapply(Mpanel_names, makeState),
Dpanel=lapply(Dpanel_names, makeState),
Slider=as.list(Slider_names))
PanelState
Slider_names
PanelState[[4]]
PanelState[[4]][[1]]
PanelState[[4]][[1]]$loc
loc<<-list("loc"=1)
stmag<<-list("stmag"=1)
Fpanel_names<-c("M_list","D_list","h_list","FP_list","F_list","sel_list","dome_list","DR_list","PRM_list","sigR_list","q_list","A_list","V_list")
Mpanel_names<-c("M1_list","IB_list","IV_list")
Dpanel_names<-c("D1_list","CB_list","Beta_list","Err_list")
Slider_names<-c("loc","stmag")
MasterList<<-list(Fpanel_names,Mpanel_names,Dpanel_names,Slider_names)
MasterList
PanelState<-list(Fpanel=lapply(Fpanel_names, makeState),
Mpanel=lapply(Mpanel_names, makeState),
Dpanel=lapply(Dpanel_names, makeState),
Slider=as.list(Slider_names))
PanelState
PanelState<-list(Fpanel=lapply(Fpanel_names, makeState),
Mpanel=lapply(Mpanel_names, makeState),
Dpanel=lapply(Dpanel_names, makeState),
Slider=lapply(Slider_names, makeState))
PanelState
PanelState[[3]][[4]]<-c(F,F,F,T) # Exception is the final selection of the data menu - quality is a radio button default to data-poor
getinputnames<-function(x)strsplit(x,"_")[[1]][1]
inputnames<<-list(Fpanel=lapply(Fpanel_names,getinputnames),
Mpanel=lapply(Mpanel_names,getinputnames),
Dpanel=lapply(Dpanel_names,getinputnames),
Slider=lapply(Slider_names,getinputnames))
inputnames
inputtabs<-as.vector(unlist(inputnames))
MasterList
inputnames
runApp('inst/shiny_apps/FRAME')
MSClog<-readRDS(file="C:/Users/tcar_/Downloads/eg_Atlantic_swo (9).frame")
MSClog[[1]]
cond<-length(MSClog)==3 & sum(names(MSClog[[1]])==c("Fpanel","Mpanel","Dpanel","Slider"))==4
cond
length(MSClog)==3
names(MSClog[[1]])
PanelState<<-MSClog[[1]]
Just<<-MSClog[[2]]
Just
inputnames
j<-1
as.character(inputnames[[4]][j])
as.numeric(PanelState[[4]][j])
length(PanelState[[4]])
runApp('inst/shiny_apps/FRAME')
