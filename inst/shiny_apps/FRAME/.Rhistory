plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=0.8,col=cols[1],axes=F)
points(ind2Data[j,],ind2Data[i,],pch=4,cex=1.6,col=cols[2],lwd=2)
ind2Data[j,]
xlim
ylim
ind2Data[i,]
points(ind2Data[j,],ind2Data[i,],pch=4,cex=1.6,col=cols[2],lwd=2)
points(ind2Data[j,],ind2Data[i,],pch=4,cex=1.6,col=cols[2],lwd=2)
cols[2]
ind2Data[j,]
ind2Data[i,]
ind2PPD[j,]
ind2PPD[i,]
xlim
ylim
ylim<-quantile(c(ind2PPD[i,],ind2Data[i,]),c(0.02,0.98),na.rm=T)
ylim
ind2Data[i,]
xlim<-range(quantile(ind2PPD[j,],c(0.02,0.98),na.rm=T),ind2Data[j,])
ylim<-range(quantile(ind2PPD[i,],c(0.02,0.98),na.rm=T),ind2Data[i,])
plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=0.8,col=cols[1],axes=F)
points(ind2Data[j,],ind2Data[i,],pch=4,cex=1.6,col=cols[2],lwd=2)
for(i in 2:ni){
for(j in 1:(ni-1)){
if(j==i|j>i){
plot(1,1,col='white',axes=F)
}else{
#coly=cols[ceiling(posmean(cor(mcmc@rawdat[1:maxn,keep1[i]],mcmc@rawdat[1:maxn,keep2[j]]))*ncols)]
xlim<-range(quantile(ind2PPD[j,],c(0.02,0.98),na.rm=T),ind2Data[j,])
ylim<-range(quantile(ind2PPD[i,],c(0.02,0.98),na.rm=T),ind2Data[i,])
plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=0.8,col=cols[1],axes=F)
points(ind2Data[j,],ind2Data[i,],pch=4,cex=1.6,col=cols[2],lwd=2)
}
if(i==2&j==(ni-1)){
legend('center',legend=c("Observed","Simulated"),text.col=c("blue","red"),bty='n')
}
if(j==1)mtext(namst[i],2,line=2,cex=0.6,las=2)
if(i==ni)mtext(namst[j],1,line=1,cex=0.6,las=2)
#if(j==1)mtext(i,2,line=2,cex=0.5,las=2)
#if(i==nplotted)mtext(j,1,line=1,cex=0.5,las=2)
}
}
dnam=c("CS","CV","CM","IS","IM","MLS","MLM")
if(pp>1)namst<-paste(rep(dnam,pp),rep((1:pp)*res,each=length(dnam)))
if(pp==1)namst=dnam
cols<-c("#ff000050","#0000ff50")
ntsd<-dim(indPPD)[1]
ni<-pp*ntsd
ind2PPD<-matrix(indPPD[,1:pp,],nrow=ni)
ind2Data<-matrix(indData[,1:pp,1],nrow=ni)
par(mfrow=c(ni-1,ni-1),mai=rep(0,4),omi=c(0.5,0.75,0,0.05))
for(i in 2:ni){
for(j in 1:(ni-1)){
if(j==i|j>i){
plot(1,1,col='white',axes=F)
}else{
#coly=cols[ceiling(posmean(cor(mcmc@rawdat[1:maxn,keep1[i]],mcmc@rawdat[1:maxn,keep2[j]]))*ncols)]
xlim<-range(quantile(ind2PPD[j,],c(0.02,0.98),na.rm=T),ind2Data[j,])
ylim<-range(quantile(ind2PPD[i,],c(0.02,0.98),na.rm=T),ind2Data[i,])
plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=0.8,col=cols[1],axes=F)
points(ind2Data[j,],ind2Data[i,],pch=4,cex=1.6,col=cols[2],lwd=2)
}
if(i==2&j==(ni-1)){
legend('center',legend=c("Observed","Simulated"),text.col=c("blue","red"),bty='n')
}
if(j==1)mtext(namst[i],2,line=2,cex=0.6,las=2)
if(i==ni)mtext(namst[j],1,line=1,cex=0.6,las=2)
#if(j==1)mtext(i,2,line=2,cex=0.5,las=2)
#if(i==nplotted)mtext(j,1,line=1,cex=0.5,las=2)
}
}
source('C:/Users/tcarruth/Dropbox/MSC_DLMtool_App/Development Code/Ancilliary indicators.R')
CC(indPPD,indData,pp=1,res=res)
plot_mdist(indPPD,indData)
CC<-function(indPPD,indData,pp=1,dnam=c("CS","CV","CM","IS","IM","MLS","MLM"),res=6){
if(pp>1)namst<-paste(rep(dnam,pp),rep((1:pp)*res,each=length(dnam)))
if(pp==1)namst=dnam
cols<-c("#ff000050","#0000ff50")
ntsd<-dim(indPPD)[1]
ni<-pp*ntsd
ind2PPD<-matrix(indPPD[,1:pp,],nrow=ni)
ind2Data<-matrix(indData[,1:pp,1],nrow=ni)
par(mfrow=c(ni-1,ni-1),mai=rep(0,4),omi=c(0.5,0.75,0,0.05))
for(i in 2:ni){
for(j in 1:(ni-1)){
if(j==i|j>i){
plot(1,1,col='white',axes=F)
}else{
#coly=cols[ceiling(posmean(cor(mcmc@rawdat[1:maxn,keep1[i]],mcmc@rawdat[1:maxn,keep2[j]]))*ncols)]
xlim<-range(quantile(ind2PPD[j,],c(0.02,0.98),na.rm=T),ind2Data[j,])
ylim<-range(quantile(ind2PPD[i,],c(0.02,0.98),na.rm=T),ind2Data[i,])
plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=0.8,col=cols[1],axes=F)
points(ind2Data[j,],ind2Data[i,],pch=4,cex=1.6,col=cols[2],lwd=2)
}
if(i==2&j==(ni-1)){
legend('center',legend=c("Observed","Simulated"),text.col=c("blue","red"),bty='n')
}
if(j==1)mtext(namst[i],2,line=2,cex=0.6,las=2)
if(i==ni)mtext(namst[j],1,line=1,cex=0.6,las=2)
#if(j==1)mtext(i,2,line=2,cex=0.5,las=2)
#if(i==nplotted)mtext(j,1,line=1,cex=0.5,las=2)
}
}
}
plot_mdist(indPPD,indData)
source('~/GitHub/FRAME/inst/shiny_apps/FRAME/AI_results.R')
plot_mdist(indPPD,indData)
nullcov<-cov(t(indPPD[,1,]))
nullm<-apply(indPPD[,1,],1,mean)
nullsims<-t(indPPD[,1,])
obs=indData[,1,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
par(mai=c(1.5,1.5,1.2,0.05))
dens<-density(dists,from=0,to=quantile(dists,0.99))
plot(dens,xlab="",main="",col='blue',ylab="")
thresh<-quantile(dists,0.95)
abline(v=thresh,lty=2,lwd=2)
text(thresh+1.2,max(dens$y)-0.02,"V (alpha = 5%)")
mtext("Mahanobis distance, D",1,line=2)
mtext("Density",2,line=2)
subdens<-getsegment(dens,thresh,lower=T)
polygon(y=subdens$x,x=subdens$y,col="blue",border=NA)
leg<-"Outlier detected (Obs > V)"
lcol<-"Red"
if(dist<thresh){
leg<-"Outlier not detected (Obs < V)"
lcol="green"
}
abline(v=dist,lwd=2,col=lcol)
text(dist+1.2,max(dens$y)-0.02,"Observed M-distance",col=lcol)
legend('top',legend=leg,text.col=lcol,bty='n')
mtext(paste("Example AI Analysis for",input$sel_MP),3,line=0.1)
nullcov<-cov(t(indPPD[,1,]))
nullm<-apply(indPPD[,1,],1,mean)
nullsims<-t(indPPD[,1,])
obs=indData[,1,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
obs
nullm
nullcov<-cov(t(indPPD[,1,]))
nullm<-apply(indPPD[,1,],1,mean,na.rm=T)
nullsims<-t(indPPD[,1,])
obs=indData[,1,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
nullm
indPPD[,1,]
nullcov<-cov(t(indPPD[,1,]))
indPPD[indPPD=="Inf"|indPPD=="-Inf"]<-NA
nullm<-apply(indPPD[,1,],1,mean,na.rm=T)
nullsims<-t(indPPD[,1,])
obs=indData[,1,1]
nullm
obs
nullsims
nullcov<-cov(t(indPPD[,1,]))
indPPD[indPPD=="Inf"|indPPD=="-Inf"]<-NA
nullm<-apply(indPPD[,1,],1,mean,na.rm=T)
nullsims<-t(indPPD[,1,])
obs=indData[,1,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
obs
nullm
nullcov
indPPD[indPPD=="Inf"|indPPD=="-Inf"]<-NA
nullcov<-cov(t(indPPD[,1,]))
nullcov
nullcov<-cov(t(indPPD[,1,]),na.rm=T)
dim(indPPD)
apply(indPPD,1:2,FUN=function(x)sum(is.na(x))>0)
dim(indPPD[,1,])
indPPD[,1,]
indPPD[,2,]
apply(indPPD[,1,],2,FUN=function(x)sum(is.na(x))>0)
apply(indPPD[,1,],2,FUN=function(x)sum(is.na(x))==0)
indPPD[indPPD=="Inf"|indPPD=="-Inf"]<-NA
keep_not_na<-apply(indPPD[,1,],2,FUN=function(x)sum(is.na(x))==0)
nullcov<-cov(t(indPPD[,1,keep_not_na]))
nullcov
nullm<-apply(indPPD[,1,],1,mean,na.rm=T)
nullsims<-t(indPPD[,1,])
obs=indData[,1,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
par(mai=c(1.5,1.5,1.2,0.05))
dens<-density(dists,from=0,to=quantile(dists,0.99))
plot(dens,xlab="",main="",col='blue',ylab="")
thresh<-quantile(dists,0.95)
abline(v=thresh,lty=2,lwd=2)
text(thresh+1.2,max(dens$y)-0.02,"V (alpha = 5%)")
mtext("Mahanobis distance, D",1,line=2)
mtext("Density",2,line=2)
subdens<-getsegment(dens,thresh,lower=T)
polygon(y=subdens$x,x=subdens$y,col="blue",border=NA)
dists
nullm
nullcov
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dist
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
dists
dists<-dists[!is.na(dists)]
par(mai=c(1.5,1.5,1.2,0.05))
dens<-density(dists,from=0,to=quantile(dists,0.99))
plot(dens,xlab="",main="",col='blue',ylab="")
indPPD[indPPD=="Inf"|indPPD=="-Inf"]<-NA
keep_not_na<-apply(indPPD[,1,],2,FUN=function(x)sum(is.na(x))==0)
nullcov<-cov(t(indPPD[,1,keep_not_na]))
nullm<-apply(indPPD[,1,],1,mean,na.rm=T)
nullsims<-t(indPPD[,1,])
obs=indData[,1,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
dists<-dists[!is.na(dists)]
par(mai=c(1.5,1.5,1.2,0.05))
dens<-density(dists,from=0,to=quantile(dists,0.99))
plot(dens,xlab="",main="",col='blue',ylab="")
thresh<-quantile(dists,0.95)
abline(v=thresh,lty=2,lwd=2)
paste(0,"V (alpha = ",alpha*100,"%)")
alpha=0.05
indPPD[indPPD=="Inf"|indPPD=="-Inf"]<-NA
keep_not_na<-apply(indPPD[,1,],2,FUN=function(x)sum(is.na(x))==0)
nullcov<-cov(t(indPPD[,1,keep_not_na]))
nullm<-apply(indPPD[,1,],1,mean,na.rm=T)
nullsims<-t(indPPD[,1,])
obs=indData[,1,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
dists<-dists[!is.na(dists)]
par(mai=c(1.5,1.5,1.2,0.05))
dens<-density(dists,from=0,to=quantile(dists,0.99))
plot(dens,xlab="",main="",col='blue',ylab="")
thresh<-quantile(dists,1-alpha)
abline(v=thresh,lty=2,lwd=2)
text(thresh+1.2,max(dens$y)-0.02,paste(0,"V (alpha = ",alpha*100,"%)"))
xlim=c(0,quantile(dists,0.99))
xlim
xlim=c(0,quantile(dists,0.98))
xlim
text(thresh+0.3*(xlim[2]-thresh),max(dens$y)*0.98,paste(0,"V (alpha = ",alpha*100,"%)"))
text(thresh+0.5*(xlim[2]-thresh),max(dens$y)*0.98,paste(0,"V (alpha = ",alpha*100,"%)"))
indPPD[indPPD=="Inf"|indPPD=="-Inf"]<-NA
keep_not_na<-apply(indPPD[,1,],2,FUN=function(x)sum(is.na(x))==0)
nullcov<-cov(t(indPPD[,1,keep_not_na]))
nullm<-apply(indPPD[,1,],1,mean,na.rm=T)
nullsims<-t(indPPD[,1,])
obs=indData[,1,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
dists<-dists[!is.na(dists)]
par(mai=c(1.5,1.5,1.2,0.05))
dens<-density(dists,from=0,to=quantile(dists,0.99))
xlim=c(0,quantile(dists,0.98))
plot(dens,xlab="",main="",col='blue',ylab="",xlim=xlim)
thresh<-quantile(dists,1-alpha)
abline(v=thresh,lty=2,lwd=2)
text(thresh+0.5*(xlim[2]-thresh),max(dens$y)*0.98,paste(0,"V (alpha = ",alpha*100,"%)"))
mtext("Mahanobis distance, D",1,line=2)
mtext("Density",2,line=2)
subdens<-getsegment(dens,thresh,lower=T)
polygon(y=subdens$x,x=subdens$y,col="blue",border=NA)
leg<-"Outlier detected (Obs > V)"
lcol<-"Red"
if(dist<thresh){
leg<-"Outlier not detected (Obs < V)"
lcol="green"
}
abline(v=dist,lwd=2,col=lcol)
text(dist+1.2,max(dens$y)-0.02,"Observed M-distance",col=lcol)
legend('top',legend=leg,text.col=lcol,bty='n')
mtext(paste("Example AI Analysis for",input$sel_MP),3,line=0.1)
mtext(paste("AI Analysis for",MSEobj_app@MPs[1]),3,line=0.1)
legend('top',legend=leg,text.col=lcol)
if(pp>1)namst<-paste(rep(dnam,pp),rep((1:pp)*res,each=length(dnam)))
if(pp==1)namst=dnam
cols<-c("#ff000050","orange")
ntsd<-dim(indPPD)[1]
ni<-pp*ntsd
ind2PPD<-matrix(indPPD[,1:pp,],nrow=ni)
ind2Data<-matrix(indData[,1:pp,1],nrow=ni)
par(mfrow=c(ni-1,ni-1),mai=rep(0,4),omi=c(0.5,0.75,0,0.05))
for(i in 2:ni){
for(j in 1:(ni-1)){
if(j==i|j>i){
plot(1,1,col='white',axes=F)
}else{
#coly=cols[ceiling(posmean(cor(mcmc@rawdat[1:maxn,keep1[i]],mcmc@rawdat[1:maxn,keep2[j]]))*ncols)]
xlim<-range(quantile(ind2PPD[j,],c(0.02,0.98),na.rm=T),ind2Data[j,])
ylim<-range(quantile(ind2PPD[i,],c(0.02,0.98),na.rm=T),ind2Data[i,])
plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=0.8,col=cols[1],axes=F)
points(ind2Data[j,],ind2Data[i,],pch=4,cex=1.6,col=cols[2],lwd=2)
}
if(i==2&j==(ni-1)){
legend('center',legend=c("Observed","Simulated"),text.col=c("blue","red"),bty='n')
}
if(j==1)mtext(namst[i],2,line=2,cex=0.6,las=2)
if(i==ni)mtext(namst[j],1,line=1,cex=0.6,las=2)
#if(j==1)mtext(i,2,line=2,cex=0.5,las=2)
#if(i==nplotted)mtext(j,1,line=1,cex=0.5,las=2)
}
}
if(pp>1)namst<-paste(rep(dnam,pp),rep((1:pp)*res,each=length(dnam)))
if(pp==1)namst=dnam
cols<-c("#0000ff50","orange")
ntsd<-dim(indPPD)[1]
ni<-pp*ntsd
ind2PPD<-matrix(indPPD[,1:pp,],nrow=ni)
ind2Data<-matrix(indData[,1:pp,1],nrow=ni)
par(mfrow=c(ni-1,ni-1),mai=rep(0,4),omi=c(0.5,0.75,0,0.05))
for(i in 2:ni){
for(j in 1:(ni-1)){
if(j==i|j>i){
plot(1,1,col='white',axes=F)
}else{
#coly=cols[ceiling(posmean(cor(mcmc@rawdat[1:maxn,keep1[i]],mcmc@rawdat[1:maxn,keep2[j]]))*ncols)]
xlim<-range(quantile(ind2PPD[j,],c(0.02,0.98),na.rm=T),ind2Data[j,])
ylim<-range(quantile(ind2PPD[i,],c(0.02,0.98),na.rm=T),ind2Data[i,])
plot(ind2PPD[j,],ind2PPD[i,],pch=19,xlim=xlim,ylim=ylim,cex=0.8,col=cols[1],axes=F)
points(ind2Data[j,],ind2Data[i,],pch=4,cex=1.6,col=cols[2],lwd=2)
}
if(i==2&j==(ni-1)){
legend('center',legend=c("Observed","Simulated"),text.col=c("blue","red"),bty='n')
}
if(j==1)mtext(namst[i],2,line=2,cex=0.6,las=2)
if(i==ni)mtext(namst[j],1,line=1,cex=0.6,las=2)
#if(j==1)mtext(i,2,line=2,cex=0.5,las=2)
#if(i==nplotted)mtext(j,1,line=1,cex=0.5,las=2)
}
}
indPPD[indPPD=="Inf"|indPPD=="-Inf"]<-NA
keep_not_na<-apply(indPPD[,1,],2,FUN=function(x)sum(is.na(x))==0)
nullcov<-cov(t(indPPD[,1,keep_not_na]))
nullm<-apply(indPPD[,1,],1,mean,na.rm=T)
nullsims<-t(indPPD[,1,])
obs=indData[,1,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
dists<-dists[!is.na(dists)]
par(mai=c(1.5,1.5,1.2,0.05))
dens<-density(dists,from=0,to=quantile(dists,0.99))
xlim=c(0,quantile(dists,0.98))
plot(dens,xlab="",main="",col='blue',ylab="",xlim=xlim)
thresh<-quantile(dists,1-alpha)
abline(v=thresh,lty=2,lwd=2)
text(thresh+0.5*(xlim[2]-thresh),max(dens$y)*0.98,paste(0,"V (alpha = ",alpha*100,"%)"))
mtext("Mahanobis distance, D",1,line=2)
mtext("Density",2,line=2)
subdens<-getsegment(dens,thresh,lower=T)
polygon(y=subdens$x,x=subdens$y,col="blue",border=NA)
leg<-"Outlier detected (Obs > V)"
lcol<-"Red"
if(dist<thresh){
leg<-"Outlier not detected (Obs < V)"
lcol="green"
}
abline(v=dist,lwd=2,col="orange")
text(dist+1.2,max(dens$y)-0.02,"Observed M-distance",col="orange")
legend('top',legend=leg,text.col=lcol,text.font=2)
mtext(paste("AI Analysis for",MSEobj_app@MPs[1]),3,line=0.1)
indPPD[indPPD=="Inf"|indPPD=="-Inf"]<-NA
keep_not_na<-apply(indPPD[,1,],2,FUN=function(x)sum(is.na(x))==0)
nullcov<-cov(t(indPPD[,1,keep_not_na]))
nullm<-apply(indPPD[,1,],1,mean,na.rm=T)
nullsims<-t(indPPD[,1,])
obs=indData[,1,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
dists<-dists[!is.na(dists)]
par(mai=c(1.5,1.5,1.2,0.05))
dens<-density(dists,from=0,to=quantile(dists,0.99))
xlim=c(0,quantile(dists,0.98))
plot(dens,xlab="",main="",col='blue',ylab="",xlim=xlim)
thresh<-quantile(dists,1-alpha)
abline(v=thresh,lty=2,lwd=2)
text(thresh+0.5*(xlim[2]-thresh),max(dens$y)*0.98,paste(0,"V (alpha = ",alpha*100,"%)"))
mtext("Mahanobis distance, D",1,line=2)
mtext("Density",2,line=2)
subdens<-getsegment(dens,thresh,lower=T)
polygon(y=subdens$x,x=subdens$y,col="blue",border=NA)
leg<-"Outlier detected (Obs > V)"
lcol<-"Red"
if(dist<thresh){
leg<-"Outlier not detected (Obs < V)"
lcol="green"
}
abline(v=dist,lwd=2,col="orange")
text(dist+1.2,max(dens$y)-0.02,"Observed M-distance",col="orange")
legend('top',legend=leg,text.col=lcol,text.font=2)
mtext(paste("AI Analysis for",MSEobj_app@MPs[1]),3,line=0.1)
indPPD[indPPD=="Inf"|indPPD=="-Inf"]<-NA
keep_not_na<-apply(indPPD[,1,],2,FUN=function(x)sum(is.na(x))==0)
nullcov<-cov(t(indPPD[,1,keep_not_na]))
nullm<-apply(indPPD[,1,],1,mean,na.rm=T)
nullsims<-t(indPPD[,1,])
obs=indData[,1,1]
dist<-mahalanobis_robust(x=obs, center=nullm, cov=nullcov)
dists<-mahalanobis_robust(x=nullsims, center=nullm, cov=nullcov)
dists<-dists[!is.na(dists)]
par(mai=c(1.5,1.5,1.2,0.05))
dens<-density(dists,from=0,to=quantile(dists,0.99))
xlim=c(0,quantile(dists,0.98))
plot(dens,xlab="",main="",col='blue',ylab="",xlim=xlim)
thresh<-quantile(dists,1-alpha)
abline(v=thresh,lty=2,lwd=2)
text(thresh+0.5*(xlim[2]-thresh),max(dens$y)*0.98,paste(0,"V (alpha = ",alpha*100,"%)"))
mtext("Mahanobis distance, D",1,line=2)
mtext("Density",2,line=2)
subdens<-getsegment(dens,thresh,lower=T)
polygon(y=subdens$x,x=subdens$y,col="blue",border=NA)
leg<-"Outlier detected (Obs > V)"
lcol<-"Red"
if(dist<thresh){
leg<-"Outlier not detected (Obs < V)"
lcol="green"
}
abline(v=dist,lwd=2,col="orange")
text(dist,max(dens$y)*0.05,"Observed M-distance",font=2,col="orange")
legend('top',legend=leg,text.col=lcol,text.font=2)
mtext(paste("AI Analysis for",MSEobj_app@MPs[1]),3,line=0.1)
runApp()
source('~/GitHub/FRAME/inst/shiny_apps/FRAME/AI_results.R')
styr=MSEobj_app@nyears
PPD<-MSEobj_app@Misc[[1]]
# Standardization
PPD@Cat<-PPD@Cat/PPD@Cat[,styr]
PPD@Ind<-PPD@Ind/PPD@Ind[,styr]
PPD@ML<-PPD@ML/PPD@ML[,styr]
tsd= c("Cat","Cat","Cat","Ind","Ind","ML", "ML")
stat=c("slp","AAV","mu","slp","mu", "slp","mu")
res<-6
indPPD<-getinds(PPD,styr=styr,res=res,tsd=tsd,stat=stat)
source('~/GitHub/FRAME/inst/shiny_apps/FRAME/AI_results.R')
load("MSEobj")
load("MSEobj_reb")
load("MSEobj_app")
dat_ind<<-XL2Data("Example_indicator_data")
styr=MSEobj_app@nyears
PPD<-MSEobj_app@Misc[[1]]
# Standardization
PPD@Cat<-PPD@Cat/PPD@Cat[,styr]
PPD@Ind<-PPD@Ind/PPD@Ind[,styr]
PPD@ML<-PPD@ML/PPD@ML[,styr]
tsd= c("Cat","Cat","Cat","Ind","Ind","ML", "ML")
stat=c("slp","AAV","mu","slp","mu", "slp","mu")
res<-6
indPPD<-getinds(PPD,styr=styr,res=res,tsd=tsd,stat=stat)
dat_ind@Cat<-dat_ind@Cat/dat_ind@Cat[,styr]
dat_ind@Ind<-dat_ind@Ind/dat_ind@Ind[,styr]
dat_ind@ML<-dat_ind@ML/dat_ind@ML[,styr]
indData<-getinds(dat_ind,styr=styr,res=res,tsd=tsd,stat=stat)
CC(indPPD,indData,pp=1,res=res)
plot_mdist(indPPD,indData)
runApp()
library(shinyalert)
install.packages('shinyalert')
runApp()
library(shinyalert)
runApp()
robustLog = function(x) {
tryCatch(log(x),
warning = function(w) {print(paste("negative argument", x));
log(-x)},
error = function(e) {print(paste("non-numeric argument", x));
NaN})
}
robustLog(-1)
robustLog(-10)
robustLog(10)
x<--2
tryCatch(log(x),
warning = function(w){ print(paste("negative argument", x)); log(-x)},
error = function(e){ print(paste("non-numeric argument", x)); NaN}
)
runApp()
dat<-XL2Data('bullshit.csv')
dat
shiny::runApp()
library(shiny)
library(DLMtool)
library(kableExtra)
library(formattable)
library(knitr)
library(dplyr)
library(httpuv)
library(shinyalert)
runApp()
runApp()
load('MSClog')
load('MSClog.msc')
load('tcarruth_autosave.msc')
load('tcarruth_autosave.frame')
getwd()
msclog<-readRDS('tcarruth_autosave.frame')
names(msclog)
length(msclog)
msclog[[1]]
MSClog<-msclog
length(MSClog)
names(MSClog[[1]])
names(MSClog[[1]])==c("Fpanel","Mpanel","Dpanel")
length(MSClog)==3 & sum(names(MSClog[[1]])==c("Fpanel","Mpanel","Dpanel"))==3
runApp()
load(MSEobj)
load("MSEobj")
MSEobj@nMPs
runApp()
install.packages("httpuv")
install.packages("shinyalert")
install.packages("httpuv")
shiny::runApp()
