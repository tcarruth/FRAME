0.4*180
shiny::runApp('C:/Users/tcar_/Dropbox/MSC_DLMtool_App/App')
runApp('C:/GitHub/FRAME/inst/shiny_apps/FRAME')
wd<-"C:/Users/tcar_/Dropbox/abft-mse"
setwd(wd)
# Some toggles
runinitialOM<-F
runM3OM<-T                             # Should the operating models be fitted (ie only new OMI and OM objects?)
reportbuild<-T                        # should the OM reports / summary reports be built?
OMbuild<-T                           # should the OM objects be built?
# --- Source MSE functions and objects ------
library(ABTMSE)
loadABT()
#source("Source/MSE_source.r")
#source("Source/Objects.r")
OMDir<-paste(getwd(),"/M3",sep="")
# --- Set up the MSE design matrix
all_levs<-list(c("1","2","3"), c("A","B","C"), c("I","II","III","IV"))
all_lnams<-list( c("1: West - h=0.6 to hockey stick 1975+, East - h=0.98 to h=0.98 1988+",
"2: West - B-H h=0.6 all years, East - h=0.98 to h=0.7 1988+",
"3: West - Hockey stock changes to B-H after 10 yrs, East - 88+ B-H with h=0.98 changes to '50-87 B-H with h=0.98 after 10 years"),
c("A: Best estimates",
"B: Western and Eastern Area SSB matches most recent VPAs",
"C: Western depletion / trend matches perception of heavy depletion"),
c("I: Younger spawning, High M",
"II: Younger spawning, Low M",
"III: Older spawning, High M",
"IV: Older spawning, Low M")
)
Design_Ref<-expand.grid(all_levs)                                               # The full design grid (all combinations) of the various factors and their levels
LNames_Ref<-expand.grid(all_lnams)
Design<-list()                 # Summarize the MSE OM design
Design$all_levs<-all_levs      # Returns a list length(funcs) long of 1:nlevels for all funcs
Design$all_lnams<-all_lnams    # Returns a list length(funcs) long of the long names of the levels for all funcs
Design$Design_Ref<-Design_Ref  #  The full design grid (all combinations) of the various factors and their levels
Design$LNames_Ref<-LNames_Ref
save(Design,file=paste0(getwd(),"/Objects/OMs/Design.Rdata"))
save(Design,file=paste0(getwd(),"/R_package/ABTMSE/data/Design.Rdata"))
nOMs<-nrow(Design_Ref)
OMcodes<-apply(Design_Ref,1,FUN=function(x)paste(x,collapse="-"))
# === Step 1: Fit the base operating model (~ 1 hour) =============================================================================================================
if(runinitialOM){
runM3(OMDir,mcmc=TRUE)                      # Run the base M3 operating model
pin_from_par(OMDir)               # Record the MLE parameter estimates as initial values
make_fit_reports(OMDir)           # Make_fit_reports(dirs=paste(getwd(),"/Objects/OMs/",1,sep="")) #make_fit_reports(dirs=paste0(getwd(),"/M3"))
}
# === Step 2: Fit the various Fitting of various natural-mortality rate and maturity rate scenarios (I, II and III) ====================================
# --- Build operating model objects and write them to folders ------------
if(OMbuild){
for(i in 1:nOMs){
print(paste(i,"/",nOMs))
load(file=paste(getwd(),"/Objects/OMs/Base_OM",sep=""))       # reference base operating model
load(file=paste(getwd(),"/Objects/OMs/Base_OM",sep=""))       # reference base operating model
OMcode<-OMcodes[i]
OMno<-i
OMfolder<-paste(getwd(),"/Objects/OMs/",OMno,sep="")
if(!dir.exists(OMfolder))dir.create(OMfolder)
OMI@Name<-paste0(OMno,"/",nOMs," : ",OMcode)
OMI@OMfactors<-as.list(LNames_Ref[OMno,])
# Recruitment scenario # factor 1
Reclev<-match(Design_Ref[i,1],Design$all_levs[[1]])
# Maturity M scenario # factor 3
MatMlev<-match(Design_Ref[i,3],Design$all_levs[[3]])
OMI<-MatM_Ref(OMI,lev=MatMlev)
file.copy(paste(OMDir,"/M3.exe",sep=""),OMfolder,overwrite=T)      # copy the latest executable to the temporary
file.copy(paste(OMDir,"/stats.cxx",sep=""),OMfolder,overwrite=T)   # copy over the statistics library
file.copy(paste(OMDir,"/M3.pin",sep=""),OMfolder,overwrite=T)      # copy over the parameter initialization file
M3write(OMI,OMdir=OMfolder)              # write the appropriate data file into the temporary folder ready to be run in parallel
save(OMI,file=paste(OMfolder,"/OMI",sep=""))                       # save the input object into its home folder
}
}
setwd(wd)
runApp('C:/GitHub/FRAME/inst/shiny_apps/FRAME')
library(FRAME)
runApp('C:/GitHub/FRAME/inst/shiny_apps/FRAME')
runApp('C:/GitHub/FRAME/inst/shiny_apps/FRAME')
shiny::runApp()
runApp()
library(ABTMSE)
DesignEffect
Design
all_levs<-list(c("1","2","3"), c("A","B","C"), c("I","II","III","IV"))
all_lnams<-list( c("1: West - h=0.6 to hockey stick 1975+, East - h=0.98 to h=0.98 1988+",
"2: West - B-H h=0.6 all years, East - h=0.98 to h=0.7 1988+",
"3: West - Hockey stock changes to B-H after 10 yrs, East - 88+ B-H with h=0.98 changes to '50-87 B-H with h=0.98 after 10 years"),
c("A: Best estimates",
"B: Western and Eastern Area SSB matches most recent VPAs",
"C: Western depletion / trend matches perception of heavy depletion"),
c("I: Younger spawning, High M",
"II: Younger spawning, Low M",
"III: Older spawning, High M",
"IV: Older spawning, Low M")
)
Design_Ref<-expand.grid(all_levs)                                               # The full design grid (all combinations) of the various factors and their levels
LNames_Ref<-expand.grid(all_lnams)
Design_Ref
library(ABTMSE)
load(system.file("ts2017.Rdata", package="ABTMSE"))
dat<-ts2017
wd<-"C:/Users/tcar_/Dropbox/abft-mse"
OMnos<-c(1,2,3,4,7,10,19,28) # All one-direction deviations from OM1
for(OMs in OMnos){
input_dir=paste0(wd,"/objects/OMs/",OMs)
out<-M3read(input_dir)
load(paste(input_dir,"/OMI",sep=""))
render(input=paste0(wd,"/R_package/ABTMSE/inst/OMreport.Rmd"), output_file=paste0(wd,"/objects/OMs/",OMs,"/report_OM",OMs,".html"))
pin_from_par(paste0(wd,"/objects/OMs/",OMs))
}
Design<-list()                 # Summarize the MSE OM design
Design$all_levs<-all_levs      # Returns a list length(funcs) long of 1:nlevels for all funcs
Design$all_lnams<-all_lnams    # Returns a list length(funcs) long of the long names of the levels for all funcs
Design$Design_Ref<-Design_Ref  #  The full design grid (all combinations) of the various factors and their levels
Design$LNames_Ref<-LNames_Ref
save(Design,file=paste0(getwd(),"/Objects/OMs/Design.Rdata"))
save(Design,file=paste0(getwd(),"/R_package/ABTMSE/data/Design.Rdata"))
nOMs<-nrow(Design_Ref)
OMcodes<-apply(Design_Ref,1,FUN=function(x)paste(x,collapse="-"))
# === Step 1: Fit the base operating model (~ 1 hour) =============================================================================================================
if(runinitialOM){
runM3(OMDir,mcmc=TRUE)                      # Run the base M3 operating model
pin_from_par(OMDir)               # Record the MLE parameter estimates as initial values
make_fit_reports(OMDir)           # Make_fit_reports(dirs=paste(getwd(),"/Objects/OMs/",1,sep="")) #make_fit_reports(dirs=paste0(getwd(),"/M3"))
}
# === Step 2: Fit the various Fitting of various natural-mortality rate and maturity rate scenarios (I, II and III) ====================================
i<-2
Alev<-match(Design_Ref[i,2],Design$all_levs[[3]])
Alev
Design_Ref[i,2]
i
Design_Ref
i<-4
print(paste(i,"/",nOMs))
load(file=paste(getwd(),"/Objects/OMs/Base_OM",sep=""))       # reference base operating model
load(file=paste(getwd(),"/Objects/OMs/Base_OM",sep=""))       # reference base operating model
OMcode<-OMcodes[i]
OMno<-i
OMfolder<-paste(getwd(),"/Objects/OMs/",OMno,sep="")
if(!dir.exists(OMfolder))dir.create(OMfolder)
OMI@Name<-paste0(OMno,"/",nOMs," : ",OMcode)
OMI@OMfactors<-as.list(LNames_Ref[OMno,])
# Recruitment scenario # factor 1
Reclev<-match(Design_Ref[i,1],Design$all_levs[[1]])
OMI<-Rec_Ref(OMI,lev=MatMlev)
wd<-"C:/Users/tcar_/Dropbox/abft-mse"
setwd(wd)
print(paste(i,"/",nOMs))
load(file=paste(getwd(),"/Objects/OMs/Base_OM",sep=""))       # reference base operating model
load(file=paste(getwd(),"/Objects/OMs/Base_OM",sep=""))       # reference base operating model
OMcode<-OMcodes[i]
OMno<-i
OMfolder<-paste(getwd(),"/Objects/OMs/",OMno,sep="")
if(!dir.exists(OMfolder))dir.create(OMfolder)
OMI@Name<-paste0(OMno,"/",nOMs," : ",OMcode)
OMI@OMfactors<-as.list(LNames_Ref[OMno,])
OMI@OMfactors
LNames_Ref[OMno,]
Reclev<-match(Design_Ref[i,1],Design$all_levs[[1]])
OMI<-Rec_Ref(OMI,lev=MatMlev)
OMI<-Rec_Ref(OMI,lev=Reclev)
OMI@nSR
OMI@SRtype
Alev<-match(Design_Ref[i,2],Design$all_levs[[3]])
OMI<-SSB_Dep_Ref(OMI,lev=Alev)
Alev
Design_Ref[i,2]
-match(Design_Ref[i,2],Design$all_levs[[3]])
Design$all_levs[[3]]
Alev<-match(Design_Ref[i,2],Design$all_levs[[2]])
OMI<-SSB_Dep_Ref(OMI,lev=Alev)
lev
lev=Alev
load(system.file("ts2017.Rdata", package="ABTMSE"))
dat<-ts2017
lev
OMI@years
print(paste(i,"/",nOMs))
load(file=paste(getwd(),"/Objects/OMs/Base_OM",sep=""))       # reference base operating model
OMI
OMI@nyears
slotNames(OMI)
OMI@years
OMcode<-OMcodes[i]
OMno<-i
OMfolder<-paste(getwd(),"/Objects/OMs/",OMno,sep="")
if(!dir.exists(OMfolder))dir.create(OMfolder)
OMI@Name<-paste0(OMno,"/",nOMs," : ",OMcode)
OMI@OMfactors<-as.list(LNames_Ref[OMno,])
# Recruitment scenario # factor 1
Reclev<-match(Design_Ref[i,1],Design$all_levs[[1]])
OMI<-Rec_Ref(OMI,lev=Reclev)
# Abundance scenario # factor 2
Alev<-match(Design_Ref[i,2],Design$all_levs[[2]])
OMI<-SSB_Dep_Ref(OMI,lev=Alev)
OMI@SSBprior
OMI@LHw
OMI@SSBCV
print(paste(i,"/",nOMs))
load(file=paste(getwd(),"/Objects/OMs/Base_OM",sep=""))       # reference base operating model
OMcode<-OMcodes[i]
OMno<-i
OMfolder<-paste(getwd(),"/Objects/OMs/",OMno,sep="")
if(!dir.exists(OMfolder))dir.create(OMfolder)
OMI@Name<-paste0(OMno,"/",nOMs," : ",OMcode)
OMI@OMfactors<-as.list(LNames_Ref[OMno,])
# Recruitment scenario # factor 1
Reclev<-match(Design_Ref[i,1],Design$all_levs[[1]])
OMI<-Rec_Ref(OMI,lev=Reclev)
# Abundance scenario # factor 2
Alev<-match(Design_Ref[i,2],Design$all_levs[[2]])
OMI<-SSB_Dep_Ref(OMI,lev=Alev)
# Maturity M scenario # factor 3
MatMlev<-match(Design_Ref[i,3],Design$all_levs[[3]])
OMI<-MatM_Ref(OMI,lev=MatMlev)
file.copy(paste(OMDir,"/M3.exe",sep=""),OMfolder,overwrite=T)      # copy the latest executable to the temporary
file.copy(paste(OMDir,"/stats.cxx",sep=""),OMfolder,overwrite=T)   # copy over the statistics library
file.copy(paste(OMDir,"/M3.pin",sep=""),OMfolder,overwrite=T)      # copy over the parameter initialization file
M3write(OMI,OMdir=OMfolder)              # write the appropriate data file into the temporary folder ready to be run in parallel
OMDir<-paste(getwd(),"/M3",sep="")
print(paste(i,"/",nOMs))
load(file=paste(getwd(),"/Objects/OMs/Base_OM",sep=""))       # reference base operating model
OMcode<-OMcodes[i]
OMno<-i
OMfolder<-paste(getwd(),"/Objects/OMs/",OMno,sep="")
if(!dir.exists(OMfolder))dir.create(OMfolder)
OMI@Name<-paste0(OMno,"/",nOMs," : ",OMcode)
OMI@OMfactors<-as.list(LNames_Ref[OMno,])
# Recruitment scenario # factor 1
Reclev<-match(Design_Ref[i,1],Design$all_levs[[1]])
OMI<-Rec_Ref(OMI,lev=Reclev)
# Abundance scenario # factor 2
Alev<-match(Design_Ref[i,2],Design$all_levs[[2]])
OMI<-SSB_Dep_Ref(OMI,lev=Alev)
# Maturity M scenario # factor 3
MatMlev<-match(Design_Ref[i,3],Design$all_levs[[3]])
OMI<-MatM_Ref(OMI,lev=MatMlev)
file.copy(paste(OMDir,"/M3.exe",sep=""),OMfolder,overwrite=T)      # copy the latest executable to the temporary
file.copy(paste(OMDir,"/stats.cxx",sep=""),OMfolder,overwrite=T)   # copy over the statistics library
file.copy(paste(OMDir,"/M3.pin",sep=""),OMfolder,overwrite=T)      # copy over the parameter initialization file
M3write(OMI,OMdir=OMfolder)              # write the appropriate data file into the temporary folder ready to be run in parallel
save(OMI,file=paste(OMfolder,"/OMI",sep=""))                       # save the input object into its home folder
OMs<-4
input_dir=paste0(wd,"/objects/OMs/",OMs)
out<-M3read(input_dir)
load(paste(input_dir,"/OMI",sep=""))
render(input=paste0(wd,"/R_package/ABTMSE/inst/OMreport.Rmd"), output_file=paste0(wd,"/objects/OMs/",OMs,"/report_OM",OMs,".html"))
#rm(list=ls(all=TRUE))                       # Remove all existing objects from environment
wd<-"C:/Users/tcar_/Dropbox/abft-mse"
setwd(wd)
# Some toggles
runinitialOM<-F
runM3OM<-T                             # Should the operating models be fitted (ie only new OMI and OM objects?)
reportbuild<-T                        # should the OM reports / summary reports be built?
OMbuild<-T                           # should the OM objects be built?
# --- Source MSE functions and objects ------
library(ABTMSE)
loadABT()
#source("Source/MSE_source.r")
#source("Source/Objects.r")
OMDir<-paste(getwd(),"/M3",sep="")
# --- Set up the MSE design matrix
all_levs<-list(c("1","2","3"), c("A","B","C"), c("I","II","III","IV"))
all_lnams<-list( c("1: West - h=0.6 to hockey stick 1975+, East - h=0.98 to h=0.98 1988+",
"2: West - B-H h=0.6 all years, East - h=0.98 to h=0.7 1988+",
"3: West - Hockey stock changes to B-H after 10 yrs, East - 88+ B-H with h=0.98 changes to '50-87 B-H with h=0.98 after 10 years"),
c("A: Best estimates",
"B: Western and Eastern Area SSB matches most recent VPAs",
"C: Western depletion / trend matches perception of heavy depletion"),
c("I: Younger spawning, High M",
"II: Younger spawning, Low M",
"III: Older spawning, High M",
"IV: Older spawning, Low M")
)
Design_Ref<-expand.grid(all_levs)                                               # The full design grid (all combinations) of the various factors and their levels
LNames_Ref<-expand.grid(all_lnams)
Design<-list()                 # Summarize the MSE OM design
Design$all_levs<-all_levs      # Returns a list length(funcs) long of 1:nlevels for all funcs
Design$all_lnams<-all_lnams    # Returns a list length(funcs) long of the long names of the levels for all funcs
Design$Design_Ref<-Design_Ref  #  The full design grid (all combinations) of the various factors and their levels
Design$LNames_Ref<-LNames_Ref
save(Design,file=paste0(getwd(),"/Objects/OMs/Design.Rdata"))
save(Design,file=paste0(getwd(),"/R_package/ABTMSE/data/Design.Rdata"))
nOMs<-nrow(Design_Ref)
OMcodes<-apply(Design_Ref,1,FUN=function(x)paste(x,collapse="-"))
# === Step 1: Fit the base operating model (~ 1 hour) =============================================================================================================
if(runinitialOM){
runM3(OMDir,mcmc=TRUE)                      # Run the base M3 operating model
pin_from_par(OMDir)               # Record the MLE parameter estimates as initial values
make_fit_reports(OMDir)           # Make_fit_reports(dirs=paste(getwd(),"/Objects/OMs/",1,sep="")) #make_fit_reports(dirs=paste0(getwd(),"/M3"))
}
# === Step 2: Fit the various Fitting of various natural-mortality rate and maturity rate scenarios (I, II and III) ====================================
# --- Build operating model objects and write them to folders ------------
if(OMbuild){
for(i in 1:nOMs){
print(paste(i,"/",nOMs))
load(file=paste(getwd(),"/Objects/OMs/Base_OM",sep=""))       # reference base operating model
OMcode<-OMcodes[i]
OMno<-i
OMfolder<-paste(getwd(),"/Objects/OMs/",OMno,sep="")
if(!dir.exists(OMfolder))dir.create(OMfolder)
OMI@Name<-paste0(OMno,"/",nOMs," : ",OMcode)
OMI@OMfactors<-as.list(LNames_Ref[OMno,])
# Recruitment scenario # factor 1
Reclev<-match(Design_Ref[i,1],Design$all_levs[[1]])
OMI<-Rec_Ref(OMI,lev=Reclev)
# Abundance scenario # factor 2
Alev<-match(Design_Ref[i,2],Design$all_levs[[2]])
OMI<-SSB_Dep_Ref(OMI,lev=Alev)
# Maturity M scenario # factor 3
MatMlev<-match(Design_Ref[i,3],Design$all_levs[[3]])
OMI<-MatM_Ref(OMI,lev=MatMlev)
file.copy(paste(OMDir,"/M3.exe",sep=""),OMfolder,overwrite=T)      # copy the latest executable to the temporary
file.copy(paste(OMDir,"/stats.cxx",sep=""),OMfolder,overwrite=T)   # copy over the statistics library
file.copy(paste(OMDir,"/M3.pin",sep=""),OMfolder,overwrite=T)      # copy over the parameter initialization file
M3write(OMI,OMdir=OMfolder)              # write the appropriate data file into the temporary folder ready to be run in parallel
save(OMI,file=paste(OMfolder,"/OMI",sep=""))                       # save the input object into its home folder
}
}
setwd(wd)
OMnos<-1:36
for(OMs in OMnos){
input_dir=paste0(wd,"/objects/OMs/",OMs)
out<-M3read(input_dir)
load(paste(input_dir,"/OMI",sep=""))
render(input=paste0(wd,"/R_package/ABTMSE/inst/OMreport.Rmd"), output_file=paste0(wd,"/objects/OMs/",OMs,"/report_OM",OMs,".html"))
pin_from_par(paste0(wd,"/objects/OMs/",OMs))
}
library(ABTMSE)
load(system.file("ts2017.Rdata", package="ABTMSE"))
dat<-ts2017
wd<-"C:/Users/tcar_/Dropbox/abft-mse"
OMnos<-1:36
for(OMs in OMnos){
input_dir=paste0(wd,"/objects/OMs/",OMs)
out<-M3read(input_dir)
load(paste(input_dir,"/OMI",sep=""))
render(input=paste0(wd,"/R_package/ABTMSE/inst/OMreport.Rmd"), output_file=paste0(wd,"/objects/OMs/",OMs,"/report_OM",OMs,".html"))
pin_from_par(paste0(wd,"/objects/OMs/",OMs))
}
runApp('C:/GitHub/FRAME/inst/shiny_apps/FRAME')
all_levs<-list(c("1","2","3"), c("A","B","C"), c("I","II","III","IV"))
all_lnams<-list( c("1: West - h=0.6 to hockey stick 1975+, East - h=0.98 to h=0.98 1988+",
"2: West - B-H h=0.6 all years, East - h=0.98 to h=0.7 1988+",
"3: West - Hockey stock changes to B-H after 10 yrs, East - 88+ B-H with h=0.98 changes to '50-87 B-H with h=0.98 after 10 years"),
c("A: Best estimates",
"B: Western and Eastern Area SSB matches most recent VPAs",
"C: Western depletion / trend matches perception of heavy depletion"),
c("I: Younger spawning, High M",
"II: Younger spawning, Low M",
"III: Older spawning, High M",
"IV: Older spawning, Low M")
)
Design_Ref<-expand.grid(all_levs)                                               # The full design grid (all combinations) of the various factors and their levels
LNames_Ref<-expand.grid(all_lnams)
Design<-list()                 # Summarize the MSE OM design
Design$all_levs<-all_levs      # Returns a list length(funcs) long of 1:nlevels for all funcs
Design$all_lnams<-all_lnams    # Returns a list length(funcs) long of the long names of the levels for all funcs
Design$Design_Ref<-Design_Ref  #  The full design grid (all combinations) of the various factors and their levels
Design$LNames_Ref<-LNames_Ref
Design_Ref
shiny::runApp('~/GitHub/FRAME/inst/shiny_apps/FRAME')
runApp('~/GitHub/FRAME/inst/shiny_apps/FRAME')
runApp('~/GitHub/FRAME/inst/shiny_apps/FRAME')
shiny::runApp()
runApp()
runApp()
runApp()
